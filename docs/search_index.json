[["index.html", "Introducci√≥n a R para el An√°lisis de Datos en Psicolog√≠a Presentaci√≥n y Licencia 0.1 Presentaci√≥n 0.2 Licencia", " Introducci√≥n a R para el An√°lisis de Datos en Psicolog√≠a Daniel P√©rez Zapata 2021-05-25 Presentaci√≥n y Licencia 0.1 Presentaci√≥n Este curso tiene como principal objetivo ense√±ar el lenguaje de programaci√≥n R desde cero para realizar an√°lisis de datos cuantitativos en las ciencias psicol√≥gicas. La idea es que el texto sea √°gil y f√°cil de leer, revise conceptos b√°sicos de programaci√≥n al igual que c√≥digo esencial para interactuar con R. Se utilizan ejemplos y casos de estudios reales en psicolog√≠a para ilustrar su uso y c√≥mo aplicarlos en contextos pr√°cticos. Aunque el texto est√° dirigido a estudiantes de pregrado, de postgrado y/o profesionales de la psicolog√≠a, cualquier persona m√°s all√° de las fronteras de esta disciplina se puede beneficiar de este curso ya que los principios del uso de R se mantienen constantes independiente del quehacer profesional particular de cada uno. No se necesitan conocimientos en programaci√≥n y ser√≠a deseable que el lector tenga conocimientos b√°sicos de un curso de estad√≠stica. 0.2 Licencia Esta obra est√° bajo una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional. https://creativecommons.org/licenses/by-sa/4.0/. Este libro puede ser reutilizado, recombinado, revisado y distribuido (incluyendo su comercializaci√≥n) por terceros siempre y cuando el cr√©dito apropiado sea dado al autor. Las obras derivadas deben estar bajo los mismos t√©rminos de licencia que el trabajo original. CC BY-SA. Este recurso se encuentra en desarrollo, por lo que si encuentras alg√∫n problema o error y te gustar√≠a inform√°rmelo, env√≠ame un correo a daniel.perez.zapata[at]gmail.com. "],["introducci√≥n.html", "Cap√≠tulo 1 Introducci√≥n 1.1 ¬øPor qu√© Programar en R? 1.2 Estructura del Presente Curso 1.3 Obst√°culos en el Aprendizaje de R 1.4 Consideraciones Finales", " Cap√≠tulo 1 Introducci√≥n Bienvenidas y bienvenidos a Introducci√≥n a R para el An√°lisis de Datos en Psicolog√≠a. Este curso tiene como principal objetivo de aprendizaje que el lector adquiera y desarrolle habilidades b√°sicas de programaci√≥n usando el lenguaje R para realizar an√°lisis de datos en psicolog√≠a. Primero que todo, me gustar√≠a decir que para usar R no hace falta ser un experto en programaci√≥n, poseer conocimientos superlativos y una memoria sinigual. Para eso existen las opciones de ayuda de RStudio (ya veremos en qu√© consiste) y el vasto universo de contenidos que habita en google. Mucho mejor es utilizar nuestros recursos cognitivos en conceptualizar y descomponer adecuadamente los pasos del an√°lisis que llevaremos a cabo, y de resolver dichos desaf√≠os flexiblemente a trav√©s de R. Despu√©s de muchas horas interactuando y leyendo un mont√≥n de recursos (libros, blogs, videos en internet, cursos presenciales y online de R, conversaciones con colegas y amigos), me he dado cuenta que cualquier persona con la motivaci√≥n y algo de tiempo puede aprender a usar R de manera bastante competente para el an√°lisis de datos. Comenc√© a aprender a programar utilizando R y Python (otro popular lenguaje de programaci√≥n que, entre muchas cosas, sirve para el an√°lisis de datos) a mediados de 2019. Obviamente, lo sigo aprendiendo d√≠a a d√≠a porque ambos lenguajes son universos inagotables y con fronteras en continua expansi√≥n gracias a sus mismos usuarios. Como la gran mayor√≠a de personas que empiezan el camino del an√°lisis de datos usando lenguajes de programaci√≥n, en un comienzo estaba perdido, no entend√≠a por donde ten√≠a que comenzar, o por qu√© ten√≠a que aprender un mont√≥n de t√©rminos como programaci√≥n orientada a objetos, atributos, entorno de desarrollo integrado, etc. Mirando en retrospectiva, este recurso online hubiera sido bastante √∫til para mi yo del pasado, considerando sobretodo mi formaci√≥n y conocimientos en psicolog√≠a. Para los no psic√≥logos o aquellos a√∫n poco familiarizados con la disciplina, en un n√∫mero importante de programas de estudios de pregrado y postgrado, no se contempla el aprendizaje de lenguajes de programaci√≥n para el an√°lisis de datos. De este modo, me parece que un libro de f√°cil lectura sobre R, basado en casos, problemas y/o investigaciones psicol√≥gicas, que entregue herramientas b√°sicas para comenzar a ensuciarse las manos con el an√°lisis de datos, es una muy buena idea y una excelente forma de invertir nuestro tiempo ü§ì. 1.1 ¬øPor qu√© Programar en R? Antes de seguir adelante, quiz√°s la primera pregunta que deber√≠amos responder es: ¬øpor qu√© deber√≠a aprender a programar en R? No es una pregunta f√°cil de contestar, pero tratar√© de responderla tomando en cuenta lo que dicen algunos textos especializados sobre el tema y tambi√©n a partir de mi propia experiencia. Probablemente, las razones m√°s comunes son porque R es gratis y de acceso abierto. Gratis es un concepto bastante auto explicativo y no es necesario ahondar en √©l (solo mencionar que R seguir√° siendo gratis per saecula saeculorum, es decir, para siempre). Acceso abierto o de c√≥digo abierto es algo menos obvio, pero f√°cil de entender. Simplemente significa que cualquier persona en el mundo puede contribuir a su desarrollo. Contrasta con lenguajes cerrados (com√∫nmente de uso comercial como Windows de Microsoft) en los cuales las personas no pueden libremente acceder al c√≥digo base y de este modo contribuir a su desarrollo. ¬øEsto significa que el desarrollo de R depende de personas con un gran esp√≠ritu prosocial que est√°n dispuestas a desarrollar herramientas para que otros puedan utilizarlas sin pagar un solo peso, d√≥lar, euro o libra? La respuesta es un s√≥lido: ¬°S√≠! Espera un momento. Esto suena demasiado bueno para ser verdad. Algunos podr√≠an reparar que esta manera de funcionamiento dejar√≠a a R a disposici√≥n de un grupo reducido de personas, quienes trabajar√≠an, desinteresadamente en estos proyectos, pero solo cuando tuvieran tiempo y, por lo tanto, que su desarrollo ser√≠a un proceso bastante lento, repleto de errores y poco confiable. Afortunadamente para nosotros, la comunidad de R es bastante extensa (literalmente miles de personas alrededor del mundo), y existen m√°s de 16,000 librer√≠as de an√°lisis de datos disponibles en R y, en general, son bastantes confiables. Como uno podr√≠a esperar, hay librer√≠as m√°s maduras que otras, y que estas √∫ltimas ya forman parte del flujo de trabajo cotidiano de muchos analistas de datos en el mundo (como por ejemplo las librer√≠as dplyr y ggplot2, las cuales forman parte del tidyverse). ¬°El trabajo de la comunidad de R saca a relucir lo mejor de la humanidad! Figura 1. Ilustraci√≥n de la comunidad de R interactuando en el mundo virtual. Otra raz√≥n para utilizar R obedece al esp√≠ritu de nuestro tiempo, espec√≠ficamente, al creciente inter√©s a nivel internacional en la ciencia de datos o data science. Probablemente, en m√°s de una ocasi√≥n han visto en alg√∫n sitio de la internet o en las noticias hablar sobre ciencia de datos. Hay una considerable oferta de cursos, diplomados o postgrados ofreciendo especializaciones en ciencia de datos, la cual fue catalogada como el trabajo m√°s sexy del siglo XXI (Davenport &amp; Patil, 2012). Si bien no existe una definici√≥n un√°nime al respecto, me gusta bastante la conceptualizaci√≥n ofrecida por Conway (2010), quien la entiende como el solapamiento o superposici√≥n de tres dominios: el conocimiento matem√°tico y estad√≠stico; habilidades de hacker o de programaci√≥n, por ejemplo, usando R o Python; y el conocimiento especializado (en nuestro caso sobre fen√≥menos psicol√≥gicos). Desde este punto de vista, los cient√≠ficos de datos no se articulan como una nueva disciplina cient√≠fica en s√≠ misma, pero sus habilidades son claves para entender, el muchas veces, desestructurado entorno que nos rodea. Figura 2. Diagrama de Venn ilustrando los dominios de solapamaniento de la ciencia de datos. Asimismo, esta forma de entender la ciencia de datos aplicadas a dominios de conocimientos espec√≠ficos es consistente con otra visi√≥n que ha calado profundamente en el quehacer anal√≠tico: la ciencia de datos constituye un cambio de cultura sobre el an√°lisis de datos. Si bien softwares como el famoso statistical package for the social sciences (SPSS) han cambiado la forma en que psic√≥logos y muchos profesionales de las ciencias sociales se aproximan al an√°lisis estad√≠stico, la capacidad de escribir c√≥digo es absolutamente fundamental para controlar e ir m√°s all√° en todas las etapas del an√°lisis de datos, como la exploraci√≥n, la visualizaci√≥n, la modelizaci√≥n y la comunicaci√≥n de los resultados, por nombrar solo algunas. Incluso, algunos sostienen que es imposible hacer ciencia de datos hoy en d√≠a sin saber programar üò±, y yo dir√≠a que se vuelve muy dif√≠cil hacer investigaci√≥n en cualquier dominio disciplinar sin tener un m√≠nimo conocimiento en programaci√≥n. 1.2 Estructura del Presente Curso Me gustar√≠a tomarme un breve momento para describir y explicar brevemente los cap√≠tulos de este curso. Luego de la introducci√≥n, el cap√≠tulo 2 se titula ‚ÄúR en Acci√≥n‚Äù, el cual presenta un n√∫mero importante de funciones que se utilizan muy frecuentemente en la exploraci√≥n y descripci√≥n de base de datos reales. El principal objetivo de esta secci√≥n es que el lector pueda observar y seguir, de manera relativamente sencilla, lo que R es capaz de hacer con solo algunas l√≠neas de c√≥digo. He preferido situar estos contenidos de manera temprana en el curso por sobre una gu√≠a paso a paso de c√≥mo instalar R y RStudio en nuestros computadores, cuyas instrucciones se pueden encontrar en el cap√≠tulo 3. Mi intenci√≥n fue que las personas pudieran r√°pidamente seguir, escribir y/o ejecutar comandos simples para obtener resultados en una base de datos real. Creo que esta forma de ordenar los contenidos podr√≠a involucrar r√°pidamente a los lectores del curso en el mundo de la programaci√≥n en R y contribuir a incrementar los niveles de motivaci√≥n. En esta l√≠nea, he tratado de incluir tanto como he podido, ejercicios simples, pero √∫tiles, a lo largo de las secciones de este recurso. En el cap√≠tulo 3, est√°n descritos paso a paso c√≥mo instalar el lenguaje de programaci√≥n R en diferentes sistemas operativos. De manera muy r√°pida, evito describir la consola de R (la cual est√° incluida en la instalaci√≥n de R) y paso directamente a hablar sobre RStudio y sus principales paneles y funcionalidades debido a que √©sta es la herramienta que usaremos a lo largo de este curso para interactuar con R. Aqu√≠ hablaremos de la consola de RStudio, el panel de c√≥digo o de script y, finalmente, me centrar√© en describir y explicar qu√© son los R Notebooks porque es una de las maneras m√°s eficientes de hacer an√°lisis de datos. Luego en el cap√≠tulo 4, reviso los comandos b√°sicos de R, el cual ayudar√° a entender y familiarizarse con la l√≥gica de funcionamiento de R y por qu√© ciertas instrucciones se ingresan de tal manera. All√≠ describiremos los s√≠mbolos de las operaciones matem√°ticas de R, junto con se√±alar c√≥mo se crean variables y algunas reglas, tanto explicitas como impl√≠citas, sobre la etiquetaci√≥n de variables. Tambi√©n echaremos un vistazo a qu√© son las funciones, sus partes principales como uno de los elementos b√°sicos de R: los vectores. El cap√≠tulo 5 explica de forma breve y general qu√© son y c√≥mo instalar librer√≠as o paquetes en R. Dichas extensiones son claves para aumentar las funcionalidades y simplificar los an√°lisis de datos en R. A continuaci√≥n, en el cap√≠tulo 6 me centrar√© en describir uno de los paquetes de an√°lisis de datos m√°s usados en el mundo de R: el tidyverse. Esta librer√≠a trae un conjunto de paquetes que son muy conocidos y frecuentemente utilizados tanto en la academia como en la industria. Probablemente, conocer para qu√© sirven estas librer√≠as es pr√°cticamente un deber en el mundo del an√°lisis de datos global de hoy en d√≠a. Cualquier trabajo que requiera en su perfil de cargo el conocimiento y uso de R, casi con toda seguridad, solicitar√° la ejecuci√≥n del an√°lisis de datos a trav√©s de librer√≠as del tidyverse. Lamentablemente, no ofrecer√© una descripci√≥n extensa de todos los paquetes que forman parte del tidyverse debido a que eso es explicado, de mejor manera, en otros recursos ya existentes y excede con suma lo que puede ser cubierto en este texto introductorio. No obstante, aspiro a presentar y encaminar al lector sobre c√≥mo enfrentarse a las diferentes funcionalidades y necesidades que pueden ser satisfechas a trav√©s de este conjunto de librer√≠as. Finalmente, en el cap√≠tulo 7 el lector encontrar√° un glosario con los t√©rminos t√©cnicos de R que son trabajados y mencionados con cierta recurrencia en este curso. De este modo, este recurso puede verse como una introducci√≥n gentil al an√°lisis de datos a trav√©s de la utilizaci√≥n de R para psic√≥logos (aunque puede ser usado por quien est√© interesado independientemente de su profesi√≥n o quehacer) o como un curso, frecuentemente llamado, de ‚Äúprimeros pasos en R‚Äù. 1.3 Obst√°culos en el Aprendizaje de R Hemos revisado someramente algunas de los principales atributos de R y la estructura de este curso, pero no hemos dicho nada acerca de los obst√°culos de este lenguaje. Me gustar√≠a mencionar dos. El primero es que la forma de interactuar con R es a trav√©s de c√≥digo, es decir, necesitamos escribir instrucciones en R para que el computador realice ciertas operaciones. Hoy en d√≠a, muchos de nosotros estamos s√∫per acostumbrados a interactuar con sistemas donde clicamos o tocamos con nuestros dedos ciertas opciones y el dispositivo nos devuelve un resultado u output. Esta interfaz no es tan com√∫n en R, por lo que nos veremos obligados a aprender a escribir c√≥digo para hacer cosas, m√°s espec√≠ficamente, an√°lisis de datos. Esto esta √≠ntimamente relacionado con la segunda limitante de R, la cual tiene que ver con que los nuevos usuarios les tomar√°n un tiempo aprender c√≥mo comunicarse con R y acostumbrarse a este proceso. Es mejor ser claros y honestos en este punto: muchas veces tendr√°n que pasar algunas horas aprendiendo a escribir c√≥digo para hacer algo muy sencillo (como por ejemplo cambiar el nombre de algunas variables). En esta etapa, se sentir√°n altamente tentados de ir a otro programa como Microsoft Excel y hacerlo manualmente ah√≠ porque es mucho m√°s sencillo (a mi me ha pasado muchas veces). Mi consejo es que resistan dicho impulso y traten de realizar dichas modificaciones en R. Aunque les llevar√° m√°s tiempo al principio del proceso de aprendizaje, y muchos mensajes de frustrantes errores tambi√©n (tomen aire y dense un peque√±o tiempo fuera de ser necesario), luego dicho esfuerzo pagar√° sus dividendos. No obstante estas debilidades, creo que las ventajas de aprende a usar R sobrepasan con creces los costos. Despu√©s de todo, tendr√°n en su computador personal una de las herramientas m√°s poderosas de an√°lisis de datos del mundo, sin pagar un solo peso, d√≥lar u euro dem√°s. 1.4 Consideraciones Finales Para escribir este curso en R me he basado en una amplia variedad de recursos, pero me gustar√≠a expl√≠citamente citar dos libros online y gratuitos debido a su calidad, filosof√≠a y tambi√©n de otorgarles el debido cr√©dito. El primero de ellos es Learning Statistics with R escrito por Danielle Navarro y R for Data Science elaborado por Hadley Wickham y Garrett Grolemund. Ambos son excelentes recursos que han influido enormemente en un amplio n√∫mero de cient√≠ficos de datos y estudiantes de psicolog√≠a mundialmente. El presente curso de R no hubiera sido posible sin la consulta frecuente de estos dos excelentes recursos. Invito a los lectores a clicar los hiperv√≠nculos de cada libro para que indaguen con m√°s detalle en ellos y puedan ir mas all√° de los contenidos aqu√≠ ense√±ados. Ser√° un tiempo personal muy bien invertido. No existe un solo recurso, curso o libro que les ense√±e a utilizar eficientemente R para cualquier tipo de problema que vayan a encontrar en el futuro. Usar competentemente R es un viaje que probablemente no tenga t√©rmino. Con absoluta seguridad, no bastar√° con leer y usar el c√≥digo de este curso. Resolver sus desaf√≠os espec√≠ficos requerir√° consultar otros recursos y con mucha seguridad buscar en google l√≠neas de c√≥digos que hagan m√°s f√°cil resolver sus propias necesidades. Este curso aspira a ser una introducci√≥n amistosa en el comienzo de aprendizaje de la utilizaci√≥n de este lenguaje de programaci√≥n para el an√°lisis de datos. ¬øQu√© debe saber el lector para sacar el mejor provecho a este curso? Conocimientos b√°sicos sobre estad√≠stica como por ejemplo saber la distinci√≥n entre an√°lisis descriptivos e inferenciales, probabilidad y contraste de hip√≥tesis. Con la liberaci√≥n de los contenidos de este curso, tambi√©n me gustar√≠a contribuir a la formaci√≥n de psic√≥logas y psic√≥logos, y de todas aquellas personas interesadas que est√°n ubicadas m√°s all√° de las fronteras de disciplina de las ciencias psicol√≥gicas. Finalmente, este curso tambi√©n se enmarca en las diferentes maneras de retribuci√≥n (no obligatoria) de conocimientos y habilidades que he adquirido a lo largo de los a√±os como resultado de mis estudios de postgrado en el extranjero de Magister y Doctorado, financiados por el gobierno de Chile a trav√©s de la Agencia Nacional de Investigaci√≥n y Desarrollo (ANID). "],["r-en-acci√≥n-analizando-un-estudio-emp√≠rico-real.html", "Cap√≠tulo 2 R en Acci√≥n: Analizando un Estudio Emp√≠rico Real 2.1 Cargando una Base de Datos desde la Web 2.2 Seleccionando Columnas en una Base de Datos 2.3 Seleccionando Filas en una Base de Datos 2.4 Limpiando Valores en una Base de Datos 2.5 Creaci√≥n de Variables a partir de otras Columnas 2.6 Graficando Datos y otras Funcionalidades 2.7 Resumen y Ejercicios", " Cap√≠tulo 2 R en Acci√≥n: Analizando un Estudio Emp√≠rico Real R es una herramienta de an√°lisis muy poderosa. El prop√≥sito de este cap√≠tulo es principalmente mostrar algunas de las cosas que puede hacer R, especialmente c√≥mo cargar un base de datos desde una pagina web, describir algunas funciones b√°sicas, c√≥mo limpiar una base de datos (esto es particularmente cr√≠tico ya que se estima que el 80% del tiempo dedicado al an√°lisis de datos es para limpiar y producir una base de datos que sea analizable) y c√≥mo graficar. Si bien explico los objetivos del an√°lisis de datos para cada parte junto con el c√≥digo utilizado, la idea principal es ilustrar algunas de sus funcionalidades y no explicar el c√≥digo de forma extensa. Al final del cap√≠tulo, el lector podr√° poner en pr√°ctica lo aprendido a trav√©s un conjunto de ejercicios. 2.1 Cargando una Base de Datos desde la Web Primero que todo, un breve resumen de la base de datos que utilizaremos en este cap√≠tulo. La base contiene datos sociodemogr√°ficos, calificaciones de cinco cursos y respuestas a preguntas sobre emociones en el contexto acad√©mico de 137 estudiantes de psicolog√≠a de una universidad p√∫blica chilena. De este modo, lo que vamos a hacer es cargar la base de datos para ejecutar nuestros ejemplos. Para esto, vamos a darle un nombre o etiqueta a nuestra base de datos dataset, luego utilizaremos el operador de asignaci√≥n &lt;- y al lado derecho usaremos la funci√≥n read.csv() de R, el cual permite leer la base de datos llamada emociones_academicas.csv. Si deseas ejecutar el c√≥digo contenido en este ejemplo, primero debes tener instalado en tu computador el lenguaje de programaci√≥n R y RStudio (Para m√°s informaci√≥n ir al Cap√≠tulo 3, donde est√°n las instrucciones paso a paso de c√≥mo hacer esto). Volviendo al archivo csv, n√≥tese que la base de datos est√° alojada en una p√°gina web y no en nuestro computador personal. Esto ya en s√≠ mismo muestra una de las ventajas de R por sobre otros software de an√°lisis de datos tales como SPSS. Inmediatamente abajo del c√≥digo para cargar la base de datos, utilizaremos la funci√≥n names para observar el nombre de las variables contenidas en la base de datos, el cual se encuentra impreso justo debajo de la celda. dataset &lt;- read.csv(&quot;https://raw.githubusercontent.com/danielivanperez/dataset_ejemplo_libro_r/main/emociones_academicas.csv&quot;) names(dataset) ## [1] &quot;participante&quot; &quot;edad&quot; &quot;sexo&quot; &quot;Nivel&quot; &quot;calificacion_1&quot; ## [6] &quot;calificacion_2&quot; &quot;calificacion_3&quot; &quot;calificacion_4&quot; &quot;calificacion_5&quot; &quot;promedio&quot; ## [11] &quot;emo_aca_1&quot; &quot;emo_aca_2&quot; &quot;emo_aca_3&quot; &quot;emo_aca_4&quot; &quot;emo_aca_5&quot; ## [16] &quot;emo_aca_6&quot; &quot;emo_aca_7&quot; &quot;emo_aca_8&quot; &quot;emo_aca_9&quot; &quot;emo_aca_10&quot; ## [21] &quot;emo_aca_11&quot; &quot;emo_aca_12&quot; Comentar brevemente los dos cuadros de arriba porque aparecer√°n muchos similares en el presente cap√≠tulo. El primero corresponde a la instrucci√≥n que escribimos en R; el segundo, con muchos hashtags o # es el output, salida o respuesta que genera R al interpretar los comandos escritos. Continuando con los primeros pasos en R, para saber el tama√±o de nuestra base de datos, podemos utilizar la funci√≥n dim() de dimensi√≥n, la cual nos entrega el n√∫mero de filas y columnas respectivamente. Apliquemos dicha funci√≥n a la base de datos reci√©n cargada. dim(dataset) ## [1] 137 22 La salida nos dice que hay 137 filas (participantes en nuestro caso) y 22 columnas (o variables). Adicionalmente, una de las funciones m√°s √∫tiles de R es poder observar un conjunto acotado de filas, observaciones o, en nuestro caso participantes, de la base de datos a analizar. Para esto, vamos a usar la funci√≥n head(). Al ejecutar esta funci√≥n, R nos muestra las primeras 6 filas de la base de datos. head(dataset) ## participante edad sexo Nivel calificacion_1 ## 1 1 19 Femenino 201 4.8 ## 2 2 20 Femenino 201 Psicolog√≠a del desarrollo infanto juvenil 4.7 ## 3 3 20 Femenino 201 Desarrollo infanto-juvenil 3,9 ## 4 4 20 Femenino 201 Metodologia de la investigaci√≥n en psicolog√≠a 38 ## 5 5 24 Femenino 302 Psicolog√≠a educacional 5.0 ## 6 6 19 Femenino 201 neuropsicolog√≠a 37 ## calificacion_2 ## 1 3.4 ## 2 Psicolog√≠a Comunitaria 4.0 ## 3 Teorias cognitivas 4,9 ## 4 Teoria del desarrollo infanto juvenil 53 ## 5 Tecnicas proyectivas 6.5 ## 6 metodolog√≠a de la investigacion en psicologia 30 ## calificacion_3 ## 1 4.6 ## 2 Teor√≠a Psicoanal√≠tica 3.2 ## 3 Metodologia de investigacion 4,8 ## 4 Teorias cognitivas 48 ## 5 Gestion de personas y desarrollo organizacional 6.3 ## 6 infanto juvenil 47 ## calificacion_4 ## 1 3.8 ## 2 Teor√≠as cognitivas 3.2 ## 3 Psicolog√≠a comunitaria 4,1 ## 4 Psicolog√≠a comunitaria 33 ## 5 Construcci√≥n de pruebas e instrumentos de evaluaci√≥n 5.6 ## 6 psicolog√≠a comunitaria 52 ## calificacion_5 promedio emo_aca_1 emo_aca_2 emo_aca_3 emo_aca_4 ## 1 3.6 NA 4 2 3 2 ## 2 Metodolog√≠as de investigaci√≥n en psicolog√≠a 3.3 NA 4 1 3 3 ## 3 Teoria psicoanalitica no NA 4 3 3 4 ## 4 Psicoanal√≠tica 38 NA 3 3 2 3 ## 5 psicopatologia infanto juvenil 5.0 NA 3 1 4 4 ## 6 psicoanalisis 37 NA 3 1 3 4 ## emo_aca_5 emo_aca_6 emo_aca_7 emo_aca_8 emo_aca_9 emo_aca_10 emo_aca_11 emo_aca_12 ## 1 3 2 4 2 3 2 3 3 ## 2 4 1 2 3 4 1 3 4 ## 3 3 3 4 2 3 4 3 3 ## 4 2 4 3 3 3 2 3 4 ## 5 4 1 4 1 4 2 4 4 ## 6 4 1 3 2 3 1 2 5 Adem√°s de la funci√≥n head(), tambi√©n tenemos la funci√≥n tail(), que nos muestra por defecto las √∫ltimas seis de filas o participantes de la base de datos. Veamos un ejemplo abajo: tail(dataset) ## participante edad sexo Nivel calificacion_1 ## 132 132 20 Masculino 302 teorias cognitivas 41 ## 133 133 20 Femenino 301 Psicopatologia infanto juvenil ## 134 134 20 Femenino 202 no ## 135 135 23 Femenino 202 desarrollo infanto juvenil . 5.4 ## 136 136 24 Femenino 302 AN√ÅLISIS CUALITATIVO 5.4 ## 137 137 21 Femenino 202 bases biologicas 42 ## calificacion_2 calificacion_3 ## 132 an√°lisis cualitativo 44 psicopatolog√≠a infanto juvenil 44 ## 133 Mediaci√≥n comunitaria Psicologia laboral ## 134 no no ## 135 taller desarrollo personal . 7.0 bases biologicas . 4.9 ## 136 PSICOPATOLOG√çA INFANTO-JUVENIL 4.5 PROBLEM√ÅTICAS PSICOSOCIALES COMPLEJAS 5.3 ## 137 ingles III 46 Teorias cognitivas 41 ## calificacion_4 calificacion_5 promedio emo_aca_1 ## 132 evaluaci√≥n psicom√©trica 54 psicologia organizacional 59 NA 3 ## 133 Taller de desarrollo personal Problem√°ticas psicosociales complejas NA 3 ## 134 No NO NA 4 ## 135 psicologia comunitaria . 4.9 ingles . 5.0 NA 4 ## 136 EVALUACI√ìN PSICOM√âTRICA 6.5 PSICOLOG√çA ORGANIZACIONAL Y DEL TRABAJO 6.2 NA 4 ## 137 psicolog√≠a comunitaria 47 PSICOLOG√çA DEL DESARROLLO INFANTO-JUVENIL 45 NA 4 ## emo_aca_2 emo_aca_3 emo_aca_4 emo_aca_5 emo_aca_6 emo_aca_7 emo_aca_8 emo_aca_9 emo_aca_10 ## 132 2 3 3 3 2 3 3 3 1 ## 133 2 3 2 3 2 3 2 3 1 ## 134 4 3 2 5 1 4 3 3 1 ## 135 2 4 4 4 2 3 2 4 2 ## 136 1 2 2 2 1 2 3 3 1 ## 137 1 4 2 4 1 3 2 3 1 ## emo_aca_11 emo_aca_12 ## 132 3 3 ## 133 3 4 ## 134 3 4 ## 135 4 3 ## 136 3 5 ## 137 3 3 En el output de arriba, podemos observar las ultimas filas de la base de datos, que van desde la fila 132 a 137. Finalmente, terminar diciendo que si queremos ver un n√∫mero determinado de observaciones de la base de datos usando la funci√≥n head() o tail(), podemos escribir el n√∫mero de filas despu√©s de dataset en nuestro caso, separado por una coma. A continuaci√≥n, muestro un ejemplo para ver las primeras 3 filas de la base de datos: head(dataset, 3) ## participante edad sexo Nivel calificacion_1 ## 1 1 19 Femenino 201 4.8 ## 2 2 20 Femenino 201 Psicolog√≠a del desarrollo infanto juvenil 4.7 ## 3 3 20 Femenino 201 Desarrollo infanto-juvenil 3,9 ## calificacion_2 calificacion_3 calificacion_4 ## 1 3.4 4.6 3.8 ## 2 Psicolog√≠a Comunitaria 4.0 Teor√≠a Psicoanal√≠tica 3.2 Teor√≠as cognitivas 3.2 ## 3 Teorias cognitivas 4,9 Metodologia de investigacion 4,8 Psicolog√≠a comunitaria 4,1 ## calificacion_5 promedio emo_aca_1 emo_aca_2 emo_aca_3 emo_aca_4 ## 1 3.6 NA 4 2 3 2 ## 2 Metodolog√≠as de investigaci√≥n en psicolog√≠a 3.3 NA 4 1 3 3 ## 3 Teoria psicoanalitica no NA 4 3 3 4 ## emo_aca_5 emo_aca_6 emo_aca_7 emo_aca_8 emo_aca_9 emo_aca_10 emo_aca_11 emo_aca_12 ## 1 3 2 4 2 3 2 3 3 ## 2 4 1 2 3 4 1 3 4 ## 3 3 3 4 2 3 4 3 3 2.2 Seleccionando Columnas en una Base de Datos El c√≥digo de arriba nos muestra las respuestas de los primeros 6 sujetos de nuestra base de datos. Podemos f√°cilmente ver que la salida o output que nos da R es relativamente extensa. Ser√≠a muy ineficiente siempre estar imprimiendo bases de datos de forma completa. Por esta raz√≥n, es mucho mejor trabajar viendo un n√∫mero limitado de variables al mismo tiempo. Empecemos con el caso m√°s simple de explorar solo una variable. A continuaci√≥n, vamos a mostrar c√≥mo utilizar el s√≠mbolo d√≥lar $, el cual nos permite seleccionar una columna o variable de la base de datos. Para proseguir con el ejemplo, nos centraremos en la variable calificacion_1. De este modo, primero escribimos el nombre de la base de datos, seguido del signo d√≥lar y, luego, seleccionar o escribir el nombre de la variables deseada (n√≥tese que seguimos utilizando la funci√≥n head() con el objetivo de tener solo 6 filas en la salida de R). head(dataset$calificacion_1) ## [1] &quot;4.8&quot; ## [2] &quot;Psicolog√≠a del desarrollo infanto juvenil 4.7 &quot; ## [3] &quot;Desarrollo infanto-juvenil 3,9&quot; ## [4] &quot;Metodologia de la investigaci√≥n en psicolog√≠a 38&quot; ## [5] &quot;Psicolog√≠a educacional 5.0&quot; ## [6] &quot;neuropsicolog√≠a 37&quot; La salida de R nos muestra las primeras 6 filas de la variable calificacion_1. Para mencionar otra forma √∫til de selecci√≥n de columnas que usaremos m√°s abajo, est√° elegir un rango de columnas como por ejemplo: head(dataset[5:9]) ## calificacion_1 calificacion_2 ## 1 4.8 3.4 ## 2 Psicolog√≠a del desarrollo infanto juvenil 4.7 Psicolog√≠a Comunitaria 4.0 ## 3 Desarrollo infanto-juvenil 3,9 Teorias cognitivas 4,9 ## 4 Metodologia de la investigaci√≥n en psicolog√≠a 38 Teoria del desarrollo infanto juvenil 53 ## 5 Psicolog√≠a educacional 5.0 Tecnicas proyectivas 6.5 ## 6 neuropsicolog√≠a 37 metodolog√≠a de la investigacion en psicologia 30 ## calificacion_3 ## 1 4.6 ## 2 Teor√≠a Psicoanal√≠tica 3.2 ## 3 Metodologia de investigacion 4,8 ## 4 Teorias cognitivas 48 ## 5 Gestion de personas y desarrollo organizacional 6.3 ## 6 infanto juvenil 47 ## calificacion_4 ## 1 3.8 ## 2 Teor√≠as cognitivas 3.2 ## 3 Psicolog√≠a comunitaria 4,1 ## 4 Psicolog√≠a comunitaria 33 ## 5 Construcci√≥n de pruebas e instrumentos de evaluaci√≥n 5.6 ## 6 psicolog√≠a comunitaria 52 ## calificacion_5 ## 1 3.6 ## 2 Metodolog√≠as de investigaci√≥n en psicolog√≠a 3.3 ## 3 Teoria psicoanalitica no ## 4 Psicoanal√≠tica 38 ## 5 psicopatologia infanto juvenil 5.0 ## 6 psicoanalisis 37 Podemos inferir del c√≥digo escrito arriba que R le asigna un n√∫mero a cada una de las columnas de la base de datos empezando desde 1. Al interior del par√©ntesis cuadrado, le pedimos a R que seleccione desde la columna 5 hasta la columna 9 y que nos muestre s√≥lo estas columnas o variables. De este modo, R muestra los valores desde la variable calificacion_1 hasta calificacion_5. 2.3 Seleccionando Filas en una Base de Datos Adem√°s de poder seleccionar columnas o variables en una base de datos, podemos seleccionar a conveniencia las filas o participantes (para este ejemplo) que queramos. Imaginemos que queremos elegir solo a los mayores de 20 a√±os de nuestra base de datos. Para esto vamos a utilizar la funci√≥n subset() que nos permite seleccionar un subconjunto de filas de una base de datos determinada. Procederemos a ejecutar un peque√±o ejemplo abajo (n√≥tese que estamos usando la funci√≥n head() para recortar el output en R): head(subset(dataset, edad &gt; 20),2) ## participante edad sexo Nivel calificacion_1 ## 5 5 24 Femenino 302 Psicolog√≠a educacional 5.0 ## 7 7 27 Femenino 201 Neuropsicolog√≠a 5.5 ## calificacion_2 ## 5 Tecnicas proyectivas 6.5 ## 7 Metodolog√≠as de Investigaci√≥n en Psicolog√≠a 3.5 ## calificacion_3 ## 5 Gestion de personas y desarrollo organizacional 6.3 ## 7 Psicolog√≠a del Desarrollo Infanto Juvenil 5.8 ## calificacion_4 calificacion_5 ## 5 Construcci√≥n de pruebas e instrumentos de evaluaci√≥n 5.6 psicopatologia infanto juvenil 5.0 ## 7 Psicolog√≠a Comunitaria 3.9 Teor√≠a Psicoanal√≠tica 4.0 ## promedio emo_aca_1 emo_aca_2 emo_aca_3 emo_aca_4 emo_aca_5 emo_aca_6 emo_aca_7 emo_aca_8 emo_aca_9 ## 5 NA 3 1 4 4 4 1 4 1 4 ## 7 NA 5 1 4 2 4 1 4 1 4 ## emo_aca_10 emo_aca_11 emo_aca_12 ## 5 2 4 4 ## 7 1 4 2 Al explorar la salida de R arriba, podemos observar que hay 50 participantes que cumplen con la condici√≥n de edad. Tambi√©n podemos usar la funci√≥n dim() para examinar la dimensionalidad o tama√±o de la base de datos. En la l√≠nea de c√≥digo de arriba, hemos escrito al interior de la funci√≥n subset() primero el nombre de la base de datos a usar, y luego la operaci√≥n l√≥gica que deseamos ejecutar sobre una columna en particular. Ahora supongamos que deseamos elegir a los mayores de 20 a√±os y, al mismo tiempo, a aquellos estudiantes que tienen 18 a√±os. Para esto, usaremos el operador l√≥gico de disyunci√≥n | (n√≥tese que estamos usando la funci√≥n tail() para recortar el output en R): tail(subset(dataset, edad &gt; 20 | edad == 18), 2) ## participante edad sexo Nivel calificacion_1 calificacion_2 ## 136 136 24 Femenino 302 AN√ÅLISIS CUALITATIVO 5.4 PSICOPATOLOG√çA INFANTO-JUVENIL 4.5 ## 137 137 21 Femenino 202 bases biologicas 42 ingles III 46 ## calificacion_3 calificacion_4 ## 136 PROBLEM√ÅTICAS PSICOSOCIALES COMPLEJAS 5.3 EVALUACI√ìN PSICOM√âTRICA 6.5 ## 137 Teorias cognitivas 41 psicolog√≠a comunitaria 47 ## calificacion_5 promedio emo_aca_1 emo_aca_2 emo_aca_3 emo_aca_4 ## 136 PSICOLOG√çA ORGANIZACIONAL Y DEL TRABAJO 6.2 NA 4 1 2 2 ## 137 PSICOLOG√çA DEL DESARROLLO INFANTO-JUVENIL 45 NA 4 1 4 2 ## emo_aca_5 emo_aca_6 emo_aca_7 emo_aca_8 emo_aca_9 emo_aca_10 emo_aca_11 emo_aca_12 ## 136 2 1 2 3 3 1 3 5 ## 137 4 1 3 2 3 1 3 3 El operador l√≥gico de disyunci√≥n | lo hemos puesto entre edad &gt; 20 y edad == 18, el cual le dice b√°sicamente a R que encuentre las filas que cumplan ambas condiciones. Ahora apliquemos la funci√≥n dim() para ver el n√∫mero de filas o participantes que cumplan ambas condiciones en nuestra base de datos. dim(subset(dataset, edad &gt; 20 | edad == 18)) ## [1] 71 22 El output nos dice que son 71 estudiantes. 2.4 Limpiando Valores en una Base de Datos Volviendo al caso, como podemos ver en las primeras 6 filas de la variable calificacion_1, a los participantes se les pidi√≥ escribir sus calificaciones para un curso determinado. Podemos observar que ellos escribieron sus respuestas de diferentes formas. Por ejemplo, escribiendo solo la calificaci√≥n como en el primer caso, o incluso escribiendo el nombre del curso de manera completa y luego la calificaci√≥n, en otros casos con un . como en la fila [1], con una , como en la fila [3] o simplemente sin punto ni coma como en la fila [6]. Esto constituir√≠a un primer problema para el analista de datos debido a que no tenemos los valores ordenados y formateados de manera est√°ndar (por ejemplo, tener solo n√∫meros dos n√∫meros separados por un .) al interior de la variable. Justamente en este tipo de situaciones es cuando R muestra todo su poder y utilidad. Como en cada respuesta o celda de la columna tenemos una combinaci√≥n de texto y n√∫meros, voy a aplicar una funci√≥n en R para que transforme todo lo que haya en sus celdas a un tipo de formato llamado character o car√°cter, el cual se refiere a que la informaci√≥n dentro de cada celda es simplemente texto (en R hay diferentes tipos de datos como los num√©ricos o numeric). Esto lo hago principalmente para proceder de manera ordenada y evitar posibles errores en el futuro al ejecutar c√≥digo. dataset[5:9] &lt;- lapply(dataset[5:9], as.character) # transformar los datos a caracteres De forma muy resumida, el c√≥digo de arriba lo que hizo fue aplicar una funci√≥n que transforma el tipo de datos de cada celda a caracteres a un set de columnas definida desde [5:9] (es decir, desde calificacion_1 a calificacion_5) de la base de datos dataset. N√≥tese que en la segunda parte del c√≥digo hay un signo hashtag #, el cual le dice a R que todo lo que est√° despu√©s de dicho s√≠mbolo no debe ser ejecutado. El # lo usamos cuando queremos escribir comentarios junto al c√≥digo para describir qu√© fue lo que hicimos como una ayuda de memoria (luego de un par de d√≠as, semanas o meses, esto ser√° de mucha ayuda) o para explicarle a alguien cada paso del c√≥digo. Ahora bien, lo que haremos a continuaci√≥n es eliminar todo lo que no sea n√∫meros (letras, puntuaciones, etc.) para las variables calificacion_1 a calificacion_5 y, obviamente, dejar solo n√∫meros o calificaciones en las celdas. Para esto, utilizaremos el c√≥digo que est√° abajo, el cual es aplicado a cada una de las calificaciones existentes en la base de datos con el fin de hacer m√°s comprensible el ejemplo. dataset$calificacion_1 &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;, dataset$calificacion_1) dataset$calificacion_2 &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;, dataset$calificacion_2) dataset$calificacion_3 &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;, dataset$calificacion_3) dataset$calificacion_4 &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;, dataset$calificacion_4) dataset$calificacion_5 &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;, dataset$calificacion_5) Si ejecutamos los nuevos valores contenidos en las columnas 5 a 9, observaremos que solo hay n√∫meros en las celdas. head(dataset[5:9]) ## calificacion_1 calificacion_2 calificacion_3 calificacion_4 calificacion_5 ## 1 48 34 46 38 36 ## 2 47 40 32 32 33 ## 3 39 49 48 41 ## 4 38 53 48 33 38 ## 5 50 65 63 56 50 ## 6 37 30 47 52 37 En esta etapa, los valores ya empiezan a estar mucho m√°s ordenados y cada vez est√°n m√°s cerca del formato final que deseamos para ejecutar algunos an√°lisis de datos de utilidad. Sin embargo, todav√≠a tenemos, al menos, dos problemas. El primero es que las calificaciones deber√≠an tener un punto . entremedio de ambos n√∫meros y, en segundo lugar, que no debemos olvidar que el contenido de las celdas est√° almacenado como caracteres y no como n√∫meros. Es muy importante que nuestras variables sean le√≠das por R como variables num√©ricas para proceder con la aplicaci√≥n de funciones cuantitativas. Por ejemplo, si las variables est√°n formateadas como caracteres y queremos aplicar la funci√≥n de media aritm√©tica, R imprimir√° un mensaje de error. De este modo, lo primero que haremos es resolver el problema del punto entre ambos n√∫meros. Para esto, usaremos el c√≥digo que esta abajo. N√≥tese que cada funci√≥n se ha aplicado a cada una de las cinco variables por separado con el fin de que el ejemplo sea m√°s entendible. dataset$calificacion_1 &lt;- sub(&quot;(?&lt;=^.)&quot;, &quot;\\\\.&quot;, dataset$calificacion_1 , perl=TRUE) dataset$calificacion_2 &lt;- sub(&quot;(?&lt;=^.)&quot;, &quot;\\\\.&quot;, dataset$calificacion_2 , perl=TRUE) dataset$calificacion_3 &lt;- sub(&quot;(?&lt;=^.)&quot;, &quot;\\\\.&quot;, dataset$calificacion_3 , perl=TRUE) dataset$calificacion_4 &lt;- sub(&quot;(?&lt;=^.)&quot;, &quot;\\\\.&quot;, dataset$calificacion_4 , perl=TRUE) dataset$calificacion_5 &lt;- sub(&quot;(?&lt;=^.)&quot;, &quot;\\\\.&quot;, dataset$calificacion_5 , perl=TRUE) head(dataset[5:9]) ## calificacion_1 calificacion_2 calificacion_3 calificacion_4 calificacion_5 ## 1 4.8 3.4 4.6 3.8 3.6 ## 2 4.7 4.0 3.2 3.2 3.3 ## 3 3.9 4.9 4.8 4.1 ## 4 3.8 5.3 4.8 3.3 3.8 ## 5 5.0 6.5 6.3 5.6 5.0 ## 6 3.7 3.0 4.7 5.2 3.7 Genial, ahora cada una de las calificaciones tiene un punto que separa ambos valores. Solo con algunas l√≠neas de c√≥digo nos hemos ahorrado, por ejemplo, hacer este procedimiento de forma manual. Es decir, escribiendo un punto para cada valor en las celdas de las variables multiplicado por 137 participantes. Probablemente esto nos hubiera dejado de muy mal humor y habiendo gastado mucho tiempo y con posibles errores en nuestra base de datos . Pero a√∫n queda un problema m√°s por resolver: cambiar el contenido de la celda de car√°cter a n√∫mero. Para ilustrar de forma m√°s clara el problema, imaginemos que queremos saber la media aritm√©tica de la variable calificacion_1: mean(dataset$calificacion_1, na.rm = TRUE) # na.rm = True descarta las celdas sin valores ## Warning in mean.default(dataset$calificacion_1, na.rm = TRUE): argument is not numeric or logical: ## returning NA ## [1] NA El mensaje de error dice lo siguiente: ‚Äúargument is not numeric or logical: returning NA[1] NA‚Äù. B√°sicamente lo que est√° sucediendo aqu√≠ es que R no puede aplicar una operaci√≥n matem√°tica a texto o caracteres. Para solucionar esto, solo debemos ejecutar el siguiente c√≥digo que transformar√° el texto a n√∫meros. dataset[5:9] &lt;- lapply(dataset[5:9], as.numeric) # Convertir columnas de 5 a 9 a numeros Ahora apliquemos nuevamente la funci√≥n de media aritm√©tica a la variable calificacion_1 y veamos qu√© sucede: mean(dataset$calificacion_1, na.rm = TRUE) ## [1] 4.38176 Al fin hemos obtenido el valor promedio para esa columna el cual corresponde a 4.38176. Esto quiere decir que los valores de las columnas est√°n listos para ser analizados cuantitativamente. Antes de pasar a la siguiente secci√≥n, me gustar√≠a presentar la funci√≥n sum() o summary, la cual es una de las funciones m√°s frecuentes de R y, b√°sicamente, nos entrega un resumen general de las variables descriptivas de una variable cuantitativa. Para ilustrarla, apliquemos dicha funci√≥n a la columna calificacion_1: summary(dataset$calificacion_1) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 1.000 3.400 4.400 4.382 5.400 7.000 12 La salida de R muestra siete valores: el puntaje m√≠nimo, el puntaje del primer cuartil, la mediana, la media aritm√©tica, el puntaje del tercer cuartil, el puntaje m√°ximo de la columna y el n√∫mero de celdas con valores perdidos o NA‚Äôs (o Not Available). 2.5 Creaci√≥n de Variables a partir de otras Columnas Ahora que ya tenemos las columnas de las calificaciones formateadas apropiadamente, vamos a calcular el promedio de las calificaciones. Para esto, vamos a utilizar la funci√≥n rowMeans() y dentro del par√©ntesis, escribiremos el set de columnas a utilizar, en nuestro caso, las cinco calificaciones que est√°n contenidas en las columnas 5 a 9. Finalmente, esta nueva columna ser√° agregada a la base de datos bajo el nombre promedio. dataset$promedio &lt;- rowMeans(dataset[,5:9], na.rm=TRUE) head(dataset$promedio) # codigo para ver las primeras 6 calificaciones. ## [1] 4.040 3.680 4.425 4.200 5.680 4.060 A diferencia de la variable promedio para las calificaciones de los estudiantes, ahora nos centraremos en un constructo llamado ‚Äúemociones acad√©micas‚Äù, la cual se enfoca en consultar a los estudiantes por una variedad de emociones tanto positivas como negativas que son sentidas durante clases. Las respuestas posibles est√°n dispuestas en una escala Likert donde el valor m√≠nimo es 1(‚Äúnunca‚Äù) y el valor m√°ximo es 5 (‚Äúsiempre‚Äù). Los 12 √≠tems son resumidos en la Tabla 1. Tabla 1 Numero Reactivo a contestar Nombre en la Base de Datos 1 Cuando estoy en clases, me siento a gusto. emo_aca_1 2 Cuando estoy en clases, me siento enojado. emo_aca_2 3 Cuando estoy en clases, me siento con energ√≠a. emo_aca_3 4 Cuando estoy en clases, me siento ansioso (nervioso). emo_aca_4 5 Cuando estoy en clases, me siento entusiasmado. emo_aca_5 6 Cuando estoy en clases, me siento molesto. emo_aca_6 7 Cuando estoy en clases, me siento inspirado. emo_aca_7 8 Cuando estoy en clases, me siento desalentado. emo_aca_8 9 Cuando estoy en clases, me siento satisfecho. emo_aca_9 10 Cuando estoy en clases, me siento triste. emo_aca_10 11 Cuando estoy en clases, me siento relajado. emo_aca_11 12 Cuando estoy en clases, me siento cansado. emo_aca_12 Con el fin de mantener la claridad de los ejemplos y centrarnos en el uso de R para el an√°lisis de datos, procederemos simplemente a construir las variables a partir de las sumatorias de los valores por filas. 1 Lo que haremos a continuaci√≥n es construir dos variables: emociones_positivas y emociones_negativas. Como podemos observar en la tabla 1, las emociones positivas est√°n dispuestas en los reactivos impares y las emociones negativas est√°n en los reactivos pares, por lo que no podemos simplemente seleccionar un rango continuo de columnas para crear estas nuevas variables. En este caso, introduciremos una nueva forma de seleccionar variables. Usaremos como siempre el nombre de la base de datos dataset y los par√©ntesis cuadrados [] para seleccionar las filas y el nombre o etiqueta de todas las variables deseadas entre comillas. Vamos a ejecutar este comando en la consola para examinar el resultado y explicarlo a continuaci√≥n. head(dataset[1:137, c(&quot;emo_aca_1&quot;,&quot;emo_aca_3&quot;,&quot;emo_aca_5&quot;,&quot;emo_aca_7&quot;,&quot;emo_aca_9&quot;,&quot;emo_aca_11&quot;)]) ## emo_aca_1 emo_aca_3 emo_aca_5 emo_aca_7 emo_aca_9 emo_aca_11 ## 1 4 3 3 4 3 3 ## 2 4 3 4 2 4 3 ## 3 4 3 3 4 3 3 ## 4 3 2 2 3 3 3 ## 5 3 4 4 4 4 4 ## 6 3 3 4 3 3 2 Como se pueden dar cuenta, llamamos a la base de datos dataset y dentro del par√©ntesis cuadrado hay espacio para especificar el n√∫mero de filas que queremos. Tomando en cuenta el ejemplo de arriba, se√±alamos expl√≠citamente 1:137, lo cual considera a la muestra completa de participantes. Luego de la , lo que hacemos es usar la funci√≥n c que es una abreviaci√≥n para la funci√≥n combine o combinar, lo cual significa que combinar√° una serie de valores al interior de un par√©ntesis circular.2 Hacemos esto para referirnos expl√≠citamente al nombre de las variables que forman la variable emociones positivas acad√©micas. N√≥tese que el nombre de las variables al interior del par√©ntesis circular est√°n entre comillas \"\" debido a que son texto o caracteres. Sino escribi√©ramos las comillas, R nos dar√≠a un mensaje de error. Ahora que explicamos el c√≥digo de arriba, vamos a proceder a crear una variable llamada emociones_positivas, la cual ser√° agregada a la base de datos con la media aritm√©tica (a trav√©s de la funcion rowMeans()) de las seis emociones de la base de datos (emo_aca_1, 3, 5, 7, 9 y 11). dataset$emociones_positivas &lt;- rowMeans(dataset[1:137,c(&quot;emo_aca_1&quot;,&quot;emo_aca_3&quot;,&quot;emo_aca_5&quot;,&quot;emo_aca_7&quot;, &quot;emo_aca_9&quot;,&quot;emo_aca_11&quot;)], na.rm=TRUE) Aprovechando el impulso, como ya hab√≠amos adelantado, en R se puede llegar al mismo resultado de diferentes maneras. Ahora, en vez de utilizar el nombre de las variables de la base de datos, vamos a usar los n√∫meros que hacen referencia a dichas columnas para imprimir en la consola de R las variables de todas las emociones negativas. head(dataset[ ,c(12,14,16,18,20,22)]) ## emo_aca_2 emo_aca_4 emo_aca_6 emo_aca_8 emo_aca_10 emo_aca_12 ## 1 2 2 2 2 2 3 ## 2 1 3 1 3 1 4 ## 3 3 4 3 2 4 3 ## 4 3 3 4 3 2 4 ## 5 1 4 1 1 2 4 ## 6 1 4 1 2 1 5 P√≥ngase especial atenci√≥n a el espacio anterior de la coma , al interior del par√©ntesis cuadrado. ¬øRecuerdan a qu√© corresponde esta posici√≥n? As√≠ es !!! A las filas o participantes de nuestra base de datos. ¬øQu√© hemos hecho? Hemos eliminado 1:137 y la hemos dejado en blanco o sin ning√∫n valor num√©rico. R autom√°ticamente interpreta esto como si nosotros quisi√©ramos seleccionar todas las filas de nuestra base de datos. De este modo, podemos utilizar diferentes formas para seleccionar valores en una base de datos. Finalmente, vamos a crear la columna emociones_negativas en la base de datos usando la funci√≥n rowMeans() con la √∫ltima forma de seleccionar filas y columnas en la base de datos. dataset$emociones_negativas &lt;- rowMeans(dataset[ ,c(12,14,16,18,20,22)]) Finalmente, mostraremos las primeras 10 filas de las variables reci√©n creadas con el siguiente c√≥digo: dataset[1:10,c(23,24)] ## emociones_positivas emociones_negativas ## 1 3.333333 2.166667 ## 2 3.333333 2.166667 ## 3 3.333333 3.166667 ## 4 2.666667 3.166667 ## 5 3.833333 2.166667 ## 6 3.000000 2.333333 ## 7 4.166667 1.333333 ## 8 2.666667 3.000000 ## 9 3.000000 2.666667 ## 10 3.000000 3.000000 2.6 Graficando Datos y otras Funcionalidades A continuaci√≥n, exploraremos brevemente algunas variables de la base de datos con el fin de presentar algunas funciones para construir tablas, gr√°ficos de barra y dispersi√≥n para formarnos una idea de los datos que disponemos. Nos enfocaremos en la variable sexo en la primera parte de esta secci√≥n. Vamos a imprimirla en la consola en el bloque de c√≥digo de abajo. head(dataset$sexo) ## [1] &quot;Femenino&quot; &quot;Femenino&quot; &quot;Femenino&quot; &quot;Femenino&quot; &quot;Femenino&quot; &quot;Femenino&quot; Oh wait! Al parecer tenemos un problema en la forma en que est√°n etiquetados los valores: femenino y masculino corresponden al g√©nero de los participantes. Ser√≠a mejor modificar ahora las etiquetas a mujer y hombre, respectivamente. Para esto vamos a usar la librer√≠a stringr, la cual forma parte de la famosa librer√≠a tidyverse(ver cap√≠tulo 6 para m√°s detalles sobre esta librer√≠a y c√≥mo instalarla). Corramos la funci√≥n y, luego, procederemos a describir lo que hay all√≠. library(stringr) str_replace_all(dataset$sexo, c(&quot;Femenino&quot; = &quot;Mujer&quot;, &quot;Masculino&quot; = &quot;Hombre&quot;)) ## [1] &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [11] &quot;Hombre&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [21] &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [31] &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [41] &quot;Hombre&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; ## [51] &quot;Hombre&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [61] &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [71] &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; ## [81] &quot;Hombre&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; ## [91] &quot;Hombre&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Hombre&quot; &quot;Hombre&quot; ## [101] &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Hombre&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [111] &quot;Hombre&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Hombre&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; ## [121] &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Hombre&quot; ## [131] &quot;Mujer&quot; &quot;Hombre&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; Primero hemos llamado a la librer√≠a stringr (esto se suele hacer solamente una vez) para luego utilizar la funci√≥n str_replace_all(). Al interior del par√©ntesis, primero tenemos que escribir la columna de la base de datos, la cual deseamos modificar. Posteriormente, usamos la funci√≥n c para combinar los elementos al interior del vector y poder aplicar los reemplazos. Para esto, debemos primero escribir entre ‚Äú‚Äù el t√©rmino a remplazar, en nuestro caso, ‚ÄúFemenino‚Äù seguido por el signo =, seguido del nuevo t√©rmino, ‚ÄúMujer‚Äù. Para poder realizar m√∫ltiples reemplazos debemos separar con una , y escribir el t√©rmino a reemplazar y luego el nuevo t√©rmino: ‚ÄúMasculino‚Äù = ‚ÄúHombre‚Äù. Finalmente, procederemos a ejecutar este cambio en la base datos con el c√≥digo de abajo. dataset$sexo &lt;- str_replace_all(dataset$sexo, c(&quot;Femenino&quot; = &quot;Mujer&quot;, &quot;Masculino&quot; = &quot;Hombre&quot;)) head(dataset$sexo) ## [1] &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; &quot;Mujer&quot; Habiendo modificado los valores de la variable sexo ahora procederemos a describir la funci√≥n table(), la cual crea resultados tabulares de variables categ√≥ricas. Apliquemos dicha funci√≥n a la variable sexo para saber cu√°ntos hombres y mujeres hay en nuestra base de datos. table(dataset$sexo) ## ## Hombre Mujer ## 39 98 Con esta simple instrucci√≥n, la salida nos dice que hay 39 hombres y 98 mujeres. Ahora para visualizar el resultado de la tabla, usaremos la funci√≥n barplot() con la instrucci√≥n arriba escrita. barplot(table(dataset$sexo)) #both columns need to be integer Una vez m√°s, con una breve instrucci√≥n usando la funci√≥n table() hemos podido construir un gr√°fico de barras de manera muy simple. Ahora pasaremos a ilustrar c√≥mo construir gr√°ficos de dispersi√≥n usando las variables continuas: promedio, emociones_positivas y emociones_negativas. Para esto, usaremos la funci√≥n plot() para crear un sencillo gr√°fico de dispersi√≥n con las variables emociones_positivas y promedio. De este modo, podremos comenzar a explorar si existe alguna relaci√≥n entre ellas: plot(dataset$emociones_positivas, dataset$promedio) El primer argumento al interior de la funci√≥n plot() corresponde al eje X a graficar (aqu√≠ emociones_positivas) y el segundo argumento separado por una coma corresponde al eje Y del gr√°fico (en este caso promedio). Habiendo ya ‚Äúploteado‚Äù estas dos variables, imaginemos que queremos saber el grado de asociaci√≥n entre ambas a partir de un modelo lineal. Para esto, utilizaremos la librer√≠a stats y la funci√≥n lm() (abreviaci√≥n de ‚Äúlinear model‚Äù o ‚Äúmodelo lineal‚Äù). Podemos hacer esto, escribiendo al interior del par√©ntesis las dos variables que deseamos comparar separada por el s√≠mbolo tilde o ~, luego agregamos una coma y escribimos el nombre de nuestra base de datos en data, es decir, data = dataset. A continuaci√≥n se muestra el c√≥digo para esto: library(stats) lm(dataset$promedio ~ dataset$emociones_positivas, data = dataset) ## ## Call: ## lm(formula = dataset$promedio ~ dataset$emociones_positivas, ## data = dataset) ## ## Coefficients: ## (Intercept) dataset$emociones_positivas ## 3.8581 0.1914 En la salida de R, vemos impresa la l√≠nea de c√≥digo escrita arriba y debajo de √©sta aparece la leyenda coefficient con dos valores: el intercept cuyo valor es de 3.8581 y el grado de relaci√≥n entre ambas variables, 0.1914. Ahora supongamos que queremos agregar una l√≠nea recta que refleje el grado de ajuste entre ambas variables. Esto se puede hacer utilizando la funci√≥n abline(). Para facilitar la aplicaci√≥n de √©sta, construiremos una variable para los resultados del modelo lineal. En nuestro ejemplo la llamaremos simplemente reg. N√≥tese que estamos dando las instrucciones para crear un gr√°fico de dispersi√≥n abajo. Usaremos esta variable al interior de la funci√≥n abline() y luego agregaremos una coma para colorear la l√≠nea de color verde. Este c√≥digo aparece a continuaci√≥n: reg &lt;- lm(dataset$promedio ~ dataset$emociones_positivas, data = dataset) plot(dataset$emociones_positivas, dataset$promedio) abline(reg, col = &quot;green&quot;) Como se puede observar, la l√≠nea recta de color verde corta el eje Y en el valor del intercept (3.8581), cuyo valor est√° almacenado en la variable reg. Abajo he escrito un ejemplo m√°s con las variables emociones_negativas y promedio. B√°sicamente, sigue la misma l√≥gica de las variables escritas arriba, solo modificando el nombre de la variable reg_1 y cambiando el color de la l√≠nea a color rojo. ¬øQu√© tipo de relaci√≥n hay entre estas dos variables? reg_1&lt;-lm(dataset$promedio ~ dataset$emociones_negativas, data = dataset) plot(dataset$emociones_negativas, dataset$promedio) abline(reg_1, col = &quot;red&quot;) Finalmente, en el c√≥digo de abajo vamos a correr la variable reg_1 en la cual est√° almacenada el valor del intercept y el coeficiente de asociaci√≥n entre el promedio y las emociones_negativas. reg_1 ## ## Call: ## lm(formula = dataset$promedio ~ dataset$emociones_negativas, ## data = dataset) ## ## Coefficients: ## (Intercept) dataset$emociones_negativas ## 4.828 -0.148 2.7 Resumen y Ejercicios El objetivo de este cap√≠tulo fue mostrar de manera breve algunas de las funcionalidades de R, qu√© tipo de cosas podemos hacer en √©l y que con breves l√≠neas de c√≥digo podemos manipular nuestra base de datos a conveniencia. En R se puede construir pr√°cticamente cualquier procedimiento que el analista de datos desee y se pueden ajustar varias opciones de diferentes procesos del an√°lisis de datos (por ejemplo, ajustar las etiquetas de los gr√°ficos o que las salidas de los an√°lisis de datos muestren m√°s informaci√≥n). A continuaci√≥n, dejo algunos ejercicios para aquellos que quieran poner en pr√°ctica lo descrito aqu√≠. Para esto, deber√°n haber cargado la base de datos desde la web y haber corrido completamente las instrucciones de este cap√≠tulo. Si experimentan alg√∫n error, probablemente ser√° porque alguna l√≠nea de c√≥digo no ha sido ejecutada apropiadamente (o alg√∫n error de escritura). Adem√°s, se asume que ustedes ya instalaron el lenguaje de programaci√≥n R y RStudio (Para m√°s informaci√≥n ir al Cap√≠tulo 3). 2.7.1 Ejercicios Seleccione los primeros 20 participantes de la base de datos dataset. Seleccione los √∫ltimos 15 participantes de la base de datos dataset. Seleccione la variable Nivel de la base de datos dataset. Seleccione a los participantes desde la fila 50 a la fila 95 junto con las variables edad y calificaci√≥n_5. Ahora proceda a crear una nueva base de datos llamada ejercicio_4 con las filas y columnas que aparecen en el ejercicio de arriba. ¬øCu√°ntas filas y columnas (o cu√°l es la dimensi√≥n) de la base de datos ejercicio_4? Seleccione a los estudiantes pertenecientes al Nivel 301. Seleccione a los estudiantes pertenecientes al Nivel 101, 201 y 202 Presente un resumen general de la variable promedio. Construya una variable llamada promedio_preg_10 que sea el promedio entre las variables: calificacion_1, calificacion_2 y calificacion_3. Construya una tabla con la variable Nivel. Construya un gr√°fico de barras con la variable Nivel. Construya un gr√°fico de dispersi√≥n entre las variables emociones_positivas y emociones_negativas en la variable grafico. Agregue una l√≠nea recta de ajuste y de color azul para la variable grafico. Calcule un modelo lineal para las variables emociones_positivas y emociones_negativas. Las respuestas a todos los ejercicios se encuentran en el Anexo 2. Si estuvi√©ramos siguiendo los pasos tradicionales en el an√°lisis de datos, probablemente antes de realizar la sumatoria de las columnas, en esta etapa deber√≠amos ejecutar un an√°lisis de confiabilidad para determinar la consistencia interna de la dimensi√≥n.‚Ü©Ô∏é Por lo general en los recursos de R, a esto se suele referir como vectores, los cuales son simplemente una secuencia de valores reunidos en una variable.‚Ü©Ô∏é "],["chapter-3.html", "Cap√≠tulo 3 ¬øQu√© es R? Instalando R y RStudio 3.1 Definiendo R 3.2 Instalando R 3.3 Instalando RStudio 3.4 Explorando RStudio 3.5 La Consola y el Panel de C√≥digo (script) 3.6 Presentando R Notebook 3.7 Resumen y Ejercicios", " Cap√≠tulo 3 ¬øQu√© es R? Instalando R y RStudio 3.1 Definiendo R R es un lenguaje de programaci√≥n que fue lanzado de manera estable el a√±o 2000 por Robert Gentleman y Ross Ihaka (1993) del Departamento de Estad√≠stica de la Universidad de Auckland (Nueva Zelanda). Para esto, ellos se basaron en el lenguaje de programaci√≥n S desarrollado en los laboratorios Bell de Estados Unidos en 1970. R fue dise√±ado con el fin exclusivo de construir un lenguaje para el an√°lisis estad√≠stico. De acuerdo al TIOBE programming community index (marzo de 2021), R ocupa el puesto 11 entre los lenguajes de programaci√≥n m√°s populares, toda una sorpresa para una herramienta que fue pensada solo para prop√≥sitos estad√≠sticos. R es un lenguaje de programaci√≥n orientado a objetos. ¬øPero qu√© quiere decir esto? Para mantener las cosas simples, diremos que este tipo de lenguajes permite definir tipos de datos y, al mismo tiempo, definir operaciones que se aplican a estos mismos tipos de datos. Por ejemplo, desde un punto de vista estad√≠stico, podemos definir un objeto como una variable x = 16 y cada vez que ejecutemos x, R imprimir√° 16. Tambi√©n podremos ejecutar algunas funciones sobre la variable o el objeto que acabamos de crear. Por ejemplo, si escribimos en R sqrt(x), nos devolver√° la ra√≠z cuadrada de 16 que es 4, y cuyo valor est√° almacenado en x. sqrt() es una funci√≥n base (es decir, que ya existe) en R que entrega la ra√≠z cuadrada de un valor o variable que est√© dentro del par√©ntesis. De este modo, no tenemos que estar escribiendo de maneras engorrosas la ra√≠z cuadrada y podemos aplicar estas funciones en las variables ya definidas. ¬°R lo hace mas f√°cil para nosotros! Habiendo definido brevemente R, ahora nos enfocaremos en instalar R en nuestro computador. Luego de esto, pasaremos r√°pidamente a la descarga de RStudio, el cual es el entorno de desarrollo integrado m√°s popular y casi por definici√≥n para interactuar con R y el que usaremos a lo largo de este curso. Nos detendremos un poco en describir RStudio, para describir sus principales paneles y di√°logos. Por ahora vamos a instalar R. 3.2 Instalando R Para esto debemos ir a la siguiente website: Sitio web de R Figura 3. P√°gina web de inicio de R. En la parte superior, aparecer√° un cuadro con tres opciones diferentes de descarga seg√∫n el sistema operativo que use tu computador (i.e., Windows, OS X o Linux). Dale clic a la opci√≥n que corresponda a tu caso. 3.2.1 R para Windows A pesar de que la p√°gina de R no es particularmente ‚Äúest√©tica‚Äù, puedes f√°cilmente visualizar y clicar la opci√≥n de descarga para Windows. Una vez hayas seleccionado este enlace, dale clic a ‚Äúinstall R for the first time‚Äù. Esto te llevar√° finalmente a la p√°gina de descarga donde tienes que clicar el enlace que dice ‚ÄúDownload R 4.0.5 for Windows (85 megabytes, 32/64 bit)‚Äù (o cual sea la versi√≥n que veas al momento de descargar R). Esto iniciar√° la descarga de un archivo, el cual tardar√° unos pocos minutos dependiendo de tu conexi√≥n a internet y otras variables. Ya descargado, haz doble clic para instalarlo y responde apropiadamente las preguntas que haga Windows para su instalaci√≥n y ubicaci√≥n. Seguir las opciones por defecto por lo general es una buena idea. Ahora ya teniendo instalado R en tu computador, puedes ir al men√∫ de inicio y abrirlo. 3.2.2 R para Mac Si tienes un ordenador Mac, dale clic al enlace correspondiente a Mac OS X. Esto te llevar√° a una p√°gina donde aparece la opci√≥n ‚ÄúR for Mac OS X‚Äù. Bajo el subt√≠tulo ‚ÄúLatest release:‚Äù, encontrar√°s un enlace con la versi√≥n que necesitas (al momento de escribir este texto, yo vi el siguiente link: ‚ÄúR-4.0.5.pkg (notarized and signed)‚Äù). Como resultado tu empezar√°s a descargar el instalador que en mi caso dec√≠a ‚ÄúR-4.0.5.pkg‚Äù. Sigue el proceso normal de instalaci√≥n de Mac para instalar R. 3.2.3 R para Linux Para este caso, debo decir que nunca he instalado un programa en Linux, por lo que no soy de mucha ayuda aqu√≠ (sorry guys!) y voy a dar una explicaci√≥n que he encontrado en la web. Deber√≠as darle clic en el enlace ‚ÄúDownload R for Linux‚Äù. En esa p√°gina, tu encontrar√°s directorios para Debian, Red Hat, Suse y Ubuntu cada una con sus respectivas instrucciones. Una vez que tengas instalado R, puedes correrlo desde la l√≠nea de comando tan solo escribiendo R. 3.3 Instalando RStudio Ahora que ya tenemos R en nuestro computador es bueno recordar que R es un lenguaje de programaci√≥n. Digo esto porque nosotros podemos interactuar con R de diferentes maneras. Una forma es interactuar con R a trav√©s de la consola que est√° instalada en nuestros laptops. Y para serles brutamente honesto, esta no es la manera m√°s eficiente de hacerlo. En cambio, lo que les propongo es usar un software libre para dicho prop√≥sito. Es aqu√≠ cuando empezamos a hablar de RStudio, el cual es un programa dise√±ado para hacer nuestras vidas m√°s f√°ciles cuando interactuemos con R. Si bien hay diferentes herramientas para comunicarse con R, RStudio es por masacre la manera m√°s popular de hacerlo y que, pr√°cticamente, se ha convertido en LA forma de hacer an√°lisis de datos. RStudio es lo que se conoce como un entorno de desarrollo integrado (Integrated Development Environment, IDE). Para seguir con las explicaciones simples y que nos permitan seguir avanzando sin mayores problemas con nuestro curso, diremos que un IDE es un software especializado que ha sido pensado para proporcionar las herramientas necesarias para un desarrollo √°gil y que cuenta con elementos como un editor, una consola, funciones de autocompletado y resaltado de sintaxis, entre otras funciones. Si bien esto aun puede parecer algo complicado, no se preocupen, en la medida que vayamos avanzando en este curso iremos ilustrando los puntos de la definici√≥n. Por ahora lo que haremos es descargar RStudio en nuestro computador. Para esto, utilizaremos el siguiente enlace: Sitio web de RStudio Figura 4. P√°gina web de inicio de RStudio. Si bajas un poco a lo largo de la p√°gina web de RStudio, te encontrar√°s con las opciones que aparecen en la figura 5. En este caso, aparece la opci√≥n de descarga de RStudio para el sistema operativo de Mac (en el cuadro azul a la izquierda de la imagen Download RStudio for Mac) porque la p√°gina web de RStudio genera autom√°ticamente el link que cada usuario necesita. Si tienes Windows, aparecer√° un link para tu sistema operativo. Figura 5. Links de descarga de RStudio para tu sistema operativo. 3.4 Explorando RStudio Haciendo un breve resumen de lo que hemos hecho en este cap√≠tulo, acabamos de descargar dos cosas: el lenguaje de programaci√≥n R y RStudio. Recalco esto porque algunos usuarios n√≥veles tienden a descargar solo uno de ellos y no lo dos. Para este curso es necesario tener ambos. OK, una vez descargado RStudio en nuestro computador, procederemos a seleccionarlo y abrirlo. Una vez abierto, deber√≠an ver una pantalla similar a la que se muestra en la figura 6. En ella, aprovecharemos de describir los principales 4 paneles que all√≠ se observan (en algunas ocasiones es necesario hacer aparecer el panel [1] script, para esto dar clic en la parte superior izquierda en File ‚ÜíNew file ‚Üí RScript). Figura 6. Paneles principales de RStudio. En la figura 6, hay cuatros rect√°ngulos de diferentes colores, los cuales describen los siguientes paneles: Panel 1: Panel de C√≥digo (Script) Panel 2: Panel de Consola (Console) Panel 3: Panel de Entorno (Environment) Panel 4: Panel de Archivos (Files) A continuaci√≥n, describiremos de forma muy general estos paneles y en la medida que vayamos avanzando en el curso, procederemos a profundizar m√°s en sus opciones y funciones. El panel de c√≥digo [1] es uno de los elementos fundamentales de RStudio, ya que en √©l podemos escribir extensas l√≠neas de comando (en caso de que lo necesitemos), guardarlas y ejecutarlas. Adem√°s, tiene herramientas que destaca diferentes porciones de c√≥digo seg√∫n la funci√≥n que cumpla y tiene tambi√©n funciones de autocompletado. Probablemente, este es el panel que m√°s utilizaremos en la medida que vayamos avanzando con el curso y con las diferentes necesidades de an√°lisis de datos que tengamos. En la consola [2] podemos interactuar o escribir directamente instrucciones para comunicarnos con R, y √©ste nos entrega de forma inmediata las salidas o resultados del c√≥digo. Tambi√©n imprime las instrucciones ejecutadas en el panel de script. En el panel [3] o de entorno existen un n√∫mero de pesta√±as con diferentes funcionalidades. Por ahora, diremos que en este panel podemos encontrar las variables creadas en algunos de los otros dos paneles descritos o revisar el hist√≥rico de instrucciones ejecutadas en R. El panel de archivos de R [4], b√°sicamente funciona como un explorador de carpetas, de este modo podemos crear, modificar, eliminar capetas o archivos sin la necesidad de salir de R. 3.5 La Consola y el Panel de C√≥digo (script) Ilustraremos brevemente el uso del panel de c√≥digo o script y la consola de R. Primero partiremos con la consola, ya que es m√°s intuitivo e interactivo su uso. En la figura 7, hay una captura de una operaci√≥n simple en la consola: aparece la instrucci√≥n o input 2 + 12, a la cual simplemente le damos enter, y obtenemos el resultado 14. Figura 7. Instrucciones en la consola de R. Una de las ventajas de usar la consola es que ingresamos un input y de forma instant√°nea obtenemos un output en la consola. Este modo de trabajo se denomina programaci√≥n interactiva y es una forma de programaci√≥n que hace que el usuario pueda observar los resultados del c√≥digo que va desarrollando en la medida que lo va creando. En t√©rminos de aprendizaje, es bastante √∫til porque el usuario produce resultados en R, percibe cierto control del proceso de programaci√≥n y se genera un ciclo de refuerzo continuo que podr√≠a incrementar su motivaci√≥n y subir su percepci√≥n de autoeficacia (al menos cuando las instrucciones funcionan). Sin embargo, si bien la consola es un buen lugar para empezar nuestra aventura a trav√©s de la programaci√≥n por los recovecos de R, al poco andar no ser√° la forma m√°s eficiente de interactuar con R. Por ejemplo, si quisi√©ramos editar m√°s de dos l√≠neas de c√≥digo en la consola, el proceso ser√≠a algo m√°s engorroso. Para hacer esto (y mucho m√°s), tenemos a nuestra disposici√≥n el panel de c√≥digo. En la figura 8 abajo, hay un ejemplo con tres l√≠neas de c√≥digo. En la l√≠nea 1, recordando lo ya dicho en el cap√≠tulo 2, el signo gato o ‚Äúhashgtag‚Äù marca el inicio de los comentarios que queramos escribir para describir lo que hace el c√≥digo. Pero de forma m√°s importante, todo lo que est√© escrito en la parte derecha del # ser√° ignorado por R y no ser√° ejecutado, por lo que la l√≠nea 1 del ejemplo no es ejecutada. En la l√≠nea 2, hemos creado la variable r (ver Cap√≠tulo 4 subsecci√≥n 4.3 para m√°s detalles) y en la l√≠nea 3 hemos dividido la variable r por 2. Figura 8. Ejemplo de instrucciones en el panel de c√≥digo de R. Un elemento importante del ejemplo de la figura 8 es que la l√≠nea 2 ha sido seleccionada (marcando el texto deseado como en el ejemplo, o simplemente dejando el cursor al inicio de la l√≠nea de c√≥digo que se desea ejecutar), y posteriormente, ejecutada. La ejecuci√≥n de una l√≠nea de c√≥digo se puede hacer al menos de dos maneras: Ctrl + Enter (en Windows), Cmd + Enter (en Mac) o dando clic en ‚ÄúRun‚Äù‚Üí ‚ÄúRun Selected line(s)‚Äù. El resultado se observa en la parte inferior, en el panel de la consola ‚Äúr &lt;- 5 * 4 # Creacion de la variable ‚Äòr‚Äô‚Äù. Lo que es importante notar de este ejemplo es que es necesario seleccionar la l√≠nea o l√≠neas de c√≥digo que se desean correr en R. Arriba solo se corri√≥ la l√≠nea 2. Ahora bien, si queremos correr la l√≠nea 2 y l√≠nea 3 del panel de c√≥digo, debemos seleccionar ambas l√≠neas y luego ejecutarlas, como lo muestra la figura 9. Figura 9. Segundo ejemplo de instrucciones en el panel de c√≥digo de R. 3.6 Presentando R Notebook Ahora me gustar√≠a hablar de otra forma de realizar an√°lisis de datos y que ha ganado mucha fuerza durante el √∫ltimo tiempo, m√°s all√° del uso de la consola o del script. Esta forma de interactuar con R se llama R Notebook. R Notebook es un documento de R Markdown (es decir, un tipo de formato de documentos din√°micos en R), en el cual puedes digitar texto normal e insertar porciones de c√≥digo que pueden ser ejecutados independiente e interactivamente, con una salida que se observa inmediatamente debajo del c√≥digo ejecutado o entrada. En la Figura 10 aparece un ejemplo de R Markdown. Figura 10. Ejemplo de un R Notebook. Hay dos maneras de crear un R Notebook. La forma m√°s sencilla de crear uno es ir y dar clic en File ‚ÜíNew file ‚Üí R Notebook (El producto de esta acci√≥n se muestra en la Figura 10); la segunda es algo un ‚Äúpoco‚Äù m√°s elaborada, es decir, usando una salida de notebook de html. En las l√≠neas 1 a 4 de la figura 9, muestra un ejemplo de c√≥mo generar un notebook con un tipo de escritura en html, al igual que el c√≥digo que aparece abajo (n√≥tese que √©ste debe estar escrito al inicio del script): --- title: &quot;R Notebook&quot; output: html_notebook --- 3.6.1 Insertando y Ejecutando Porciones de C√≥digo Las porciones de c√≥digo pueden ser insertadas usando los atajos del teclado seg√∫n el sistema operativo que tengas. Si estas usando macOS, debes usar Cmd + Option + I; y si estas usando Windows, utiliza Ctrl + Alt + I. Asimismo, tambi√©n puedes usar la opci√≥n Insert a new code chunk para agregar pedazos de c√≥digo en el R Markdown. La figura 11 muestra un ejemplo de un trozo o pedazo de c√≥digo desde la l√≠nea 9 a la 11, que al ser ejecutado da como resultado 100: Figura 11. R Chunk o pedazo de c√≥digo en R. Como se puede apreciar en la figura de arriba, en la l√≠nea 9 se define el inicio del trozo de c√≥digo espec√≠fico (```{r}); en la l√≠nea 10, se encuentra la l√≠nea de comando que deseamos ejecutar al interior, es decir, 5 * 20; luego en la l√≠nea 11, aparece 3 ‚Äúbackticks‚Äù seguidos para indicar que all√≠ finaliza el trozo de c√≥digo. Todo lo que est√© m√°s all√° de estas l√≠neas no ser√° considerado como parte de ese c√≥digo particular. Para ejecutar todo lo que est√° dentro del pedazo de c√≥digo de R, tenemos que darle clic a la flecha verde al lado derecho de cada chunk de c√≥digo en gris. En la figura 11, aparece una peque√±a ventana que dice Run Current Chunk. Alternativamente, podemos usar el siguiente atajo con el teclado en Windows Ctrl + Shift * Enter o el siguiente Cmd + Shift + Enter si estamos usando macOS. Finalmente, abajo aparece el output de nuestro comando: [1] 100. Cada vez que usemos R Notebooks, es bueno guardar los cambios al igual como si estuvi√©ramos trabajando con un archivo Word com√∫n y corriente. De otro modo, todo nuestro progreso no ser√° salvado. Se recomienda que cuando el usuario adquiera m√°s experiencia en el manejo de RStudio, pueda trabajar principalmente con los R Notebooks y/o usar la consola de R para probar ciertas instrucciones simples si es que lo desea. 3.7 Resumen y Ejercicios En el presente cap√≠tulo revisamos c√≥mo instalar el programa de programaci√≥n R y RStudio. Adem√°s, exploramos brevemente RStudio y sus principales paneles, describiendo algunas funcionalidades de la consola, el panel de script, y finalizando con una somera descripci√≥n de R Notebook. 3.7.1 Ejercicios Cree un nuevo R Notebook en RStudio y guarde dicho archivo con el nombre: ‚Äúejercicio_1‚Äù. Borre uno de los guiones en la l√≠nea 4 del R Notebook. ¬øQu√© es lo que sucede? Elimine todo el texto que aparece de la l√≠nea 14 a la l√≠nea 18. Ejecute el trozo de c√≥digo que va desde la l√≠nea 10 a la 12. ¬øQu√© es lo que sucede? Inserte un trozo de c√≥digo a partir de la l√≠nea 14. En la l√≠nea 15 escriba la siguiente operaci√≥n: (23*7)/ 2.5 ¬øCu√°l es el resultado? Las respuestas a todos los ejercicios se encuentran en el Anexo 2. "],["chapter-4.html", "Cap√≠tulo 4 Comandos B√°sicos en R 4.1 R como una Simple Calculadora3 4.2 Orden de Operaciones Matem√°ticas en R 4.3 Variables en R 4.4 Errores de Escritura o typos en R 4.5 Funciones en R 4.6 Almacenando N√∫meros (o Vectores) en Variables", " Cap√≠tulo 4 Comandos B√°sicos en R 4.1 R como una Simple Calculadora3 Una de las primeras cosas que podemos hacer para comenzar a familiarizarnos con R es usarla como si fuera una simple calculadora. De esta manera, escribiremos los primeros comandos o instrucciones y obtendremos resultados conocidos a partir de nuestra experiencia con c√°lculos matem√°ticos adquiridos durante nuestra educaci√≥n primaria. Nada intimidante la verdad. En la consola de R, podemos escribir 2 + 5 y luego apretar ‚Äúenter‚Äù. Cuando escribimos 2 + 5 lo que hicimos fue escribir un comando y R ejecutar√° dicho comando. Lo que tu vas a ver en la consola de R corresponde a: 2 + 5 ## [1] 7 Ahora bien, este simple ejemplo nos servir√° para explicar algunas cosas muy simples de R. El primer bloque de arriba (es decir, 2 + 5) corresponde al comando o instrucciones que escribimos y el bloque de abajo es el output o salida de R, el cual nos muestra el resultado de la suma. En este bloque, aparecen dos hashtags o ‚Äúsignos gatos‚Äù (como le decimos en Chile), al lado [1], el cual se√±ala el n√∫mero del output producido por R (y que por cierto nosotros no escribimos, sino fue producido por R) y al lado, finalmente, aparece el resultado de la sumatoria, es decir, 7. So far, so good! (¬°hasta ahora todo bien!). En la tabla 1, puedes encontrar un resumen de algunas operaciones matem√°ticas b√°sicas en R. Tabla 1 Operaci√≥n S√≠mbolo u operador Ejemplo Resultado Suma + 3 + 6 9 Resta - 6 - 2 4 Multiplicaci√≥n * 5 * 8 40 Divisi√≥n / 21 / 7 3 Potencia ^ 2 ^ 6 64 4.2 Orden de Operaciones Matem√°ticas en R Habiendo presentado brevemente los s√≠mbolos matem√°ticos en R, cuando nos enfrentamos a situaciones donde debemos escribir diferentes c√°lculos, el orden de ejecuci√≥n de dichas operaciones sigue el mismo orden que aprendimos durante nuestro tiempo escolar: se realiza primero lo que est√° dentro del par√©ntesis, luego potencias, para despu√©s seguir con divisiones y multiplicaciones, para finalmente terminar con sumas y restas. Abajo encontrar√°n tres breves ejemplos en R que ilustran estos principios. 5 + 5 * 12 ## [1] 65 En el caso de arriba, el n√∫mero 5 es multiplicado con el n√∫mero 12 y luego al final se le suma el n√∫mero 5 para obtener el resultado de 65. (5 + 5) * 12 ## [1] 120 En este bloque, primero se suman los dos n√∫meros que est√°n al interior del par√©ntesis (es decir, 5 + 5 = 10) y luego el resultado se multiplica con 12 para obtener 120. (2 ^ 3 ) / 2 ## [1] 4 Al igual que el ejemplo de arriba, la operaci√≥n que est√° dentro del par√©ntesis es lo que se ejecuta en primer lugar (es decir, la potencia de 2 elevada al cubo = 2 √ó 2 √ó 2 = 8), cuyo resultado despu√©s ser√° dividido por 2, lo que equivale a 4. 4.3 Variables en R Una de las principales ventajas de usar R es que podemos crear variables con el fin de almacenar informaci√≥n en ellas. Una manera bastante simple de entender el rol de las variables en R es que nosotros asignamos una etiqueta o un nombre a un conjunto de informaci√≥n determinada. La gracia de R en este caso es bastante grande: para realizar an√°lisis de datos se necesita poder usar variables y R nos permite hacerlo de manera bastante sencilla. 4.3.1 Construyendo Variables en R Para crear una variable, debemos utilizar el operador de asignaci√≥n &lt;-. Veamos un ejemplo. mi_edad &lt;- 35 Arriba he creado una variable que tiene por nombre o etiqueta mi_edad (lado izquierdo del comando) y he asignado un valor num√©rico a esta variable (35, el cual est√° en el lado derecho) a trav√©s del operador de asignaci√≥n &lt;-. Ahora, si escribo y ejecuto la variable mi_edad, veamos lo que pasa. mi_edad ## [1] 35 R ha impreso el valor 35, el cual corresponde a la operaci√≥n realizada m√°s arriba. Ahora imaginemos que deseo realizar algunas operaciones matem√°ticas con la variable mi_edad: mi_edad * 5 ## [1] 175 mi_edad / 5 ## [1] 7 mi_edad ^ 5 ## [1] 52521875 En estos tres ejemplos, podemos ver la versatilidad y sencillez de R para ejecutar operaciones matem√°ticas sobre una variable arbitraria. ¬°Imaginen las posibilidades que nos ofrece R para interactuar de diferentes maneras con set de datos! Figura 7. Usuario inicial de R imaginando las posibilidades. Incluso podemos crear nuevas variables y aplicar operaciones matem√°ticas entre ellas. Veamos los siguientes ejemplos. mi_sueldo_al_mes &lt;- 2000 mi_sueldo_al_mes ## [1] 2000 mi_sueldo_al_mes * mi_edad ## [1] 70000 mi_sueldo_al_mes + mi_edad / 10 ## [1] 2003.5 Con estos sencillos ejemplos, podemos comenzar a apreciar c√≥mo en R creamos variables (u objetos), asign√°ndole valores num√©ricos con los cuales jugar y combinar para empezar a realizar an√°lisis de datos. 4.3.2 Reglas para Nombrar Variables R tiene posee algunas reglas generales para etiquetar o nombrar variables. A continuaci√≥n, las listar√© con el fin de comentarlas solo un poco porque son bastante auto explicativas. Los nombres de variables usan caracteres en min√∫sculas y may√∫sculas (R reconoce estas diferencias al momento de escribir sus variables). Se pueden incluir n√∫meros en el nombre de variables, tambi√©n puntos . o guion bajo _ . Un nombre de variable valido es item_empatia_1 o tambi√©n √≠tem.empat√≠a.2. El segundo ejemplo incorpora tildes, los cuales son asignados correctamente en R, aunque debemos tener cuidado que al usar tildes, debemos utilizarlas siempre para nuestro trabajo posterior. Sino, R nos dar√° un error. Los nombres de las variables no deben incluir espacios. mi edad no es un nombre v√°lido; en cambio, mi.edad o mi_edad lo son. Los nombres deben empezar con una letra o con punto, pero no pueden empezar con gui√≥n bajo o con n√∫mero. Por lo tanto, _mi_edad, 35_mi_edad, son ejemplos inv√°lidos en R. No podemos nombrar a nuestras variables con los nombres reservados en R. Los nombres reservados de R son nombres especiales que R utiliza para realizar ciertas operaciones y que debe restringir para que no haya problemas cuando se les requiera. Los nombres reservados son: if, else, repeat, while, function, for, in, next, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_ y NA_character_. Les recomendar√≠a que no inviertan su tiempo en memorizarlas (de hecho, yo casi no me las s√© y tuve que mirar un documento para escribirlas aqu√≠). 4.3.3 Convenciones Informales para Nombrar Variables A continuaci√≥n, mencionar√© algunas convenciones o recomendaciones informales que se tienden a utilizar en los nombres de variables en R. Si bien, obviamente, no es obligatoria seguirlas, es una buena pr√°ctica cumplir con ellas, sobretodo, si luego tu c√≥digo ser√° compartido con otras personas dentro de un flujo de trabajo. Usar nombres informativos. Por ejemplo, buenos ejemplos podr√≠an ser edad o educacion y malos ejemplos podr√≠an ser variable_1 o nueva_variable debido a que sus nombres no nos dicen nada acerca de qu√© se tratan dichas variables. Usar nombres breves o cortos. Escribir nombres largos de variables es una ‚Äúlata‚Äù y, probablemente, una p√©rdida de tiempo cuando estemos concentrados en realizar nuestros an√°lisis de datos. Un ejemplo de un nombre de variable muy largo ser√≠a edad_de_los_participantes. Sin embargo, es dif√≠cil mantener un buen equilibrio en construir nombres informativos y significativos, sin que sean demasiado largos. Cuando llegue el momento, uno deber√° tomar ciertas decisiones al respecto. Ser consistente en la manera de nombrar variables. Como vimos arriba, podemos nombrar las variables con gui√≥n bajo o con puntos, cualquiera de las dos maneras est√° bien, pero lo m√°s relevante es usar solo uno de ellos cuando se est√©n asignados el nombre a las variables en nuestro estudio. Otras personas prefieren usar may√∫sculas evitando el uso de otros s√≠mbolos como por ejemplo EdadNi√±os. Por lo tanto, el mensaje central es ser consistente. 4.4 Errores de Escritura o typos en R Para interactuar con R, nuestras instrucciones y nombres de variables deben ser claras y precisas. De este modo, R podr√° realizar exactamente lo que nosotros le pidamos. Sin embargo, si no somos lo suficientemente claros y precisos, R no har√° lo que le pidamos y nos dar√° alg√∫n mensaje de error de alg√∫n tipo. Y acept√©moslo, m√°s temprano que tarde cometeremos un error de escritura en R, el cual ser√° el inicio de muchos errores en el camino que emprendamos en el an√°lisis de datos a trav√©s del uso de R. Este es solo un recordatorio amigable que no debemos sentirnos mal cuando cometamos un error en R. Esto tambi√©n es una se√±al de que estamos avanzando y aprendiendo. 4.5 Funciones en R Uno de los elementos m√°s √∫tiles en R al realizar an√°lisis de datos es la utilizaci√≥n de funciones. En esta subsecci√≥n, revisaremos algunos elementos b√°sicos de las funciones y m√°s adelante veremos c√≥mo podemos empezar a definir funciones. En el inicio del cap√≠tulo 3 vimos un ejemplo de funci√≥n aplicada a una variable (es decir, sqrt(x)). En ese ejemplo, usamos una de las funciones bases de R para obtener la ra√≠z cuadrada de 16 que estaba almacenada en x. Obviamente, podemos obtener el mismo resultado aplicando dicha funci√≥n a la siguiente expresi√≥n num√©rica (abajo muestro nuevamente la aplicaci√≥n de la funci√≥n a una variable, como recordatorio): sqrt(16) ## [1] 4 x &lt;- 16 sqrt(x) ## [1] 4 En vez de estar escribiendo una f√≥rmula matem√°tica en R para la ra√≠z cuadrada, podemos usar esta funci√≥n para obtener nuestro resultado a un valor determinado (ya sea un n√∫mero o una variable como en los ejemplos de arriba). Ahora, aprovecharemos de explicar algunos t√©rminos t√©cnicos para este caso. Usualmente, cuando aplicamos una funci√≥n en R, decimos que llamaremos (calling) dicha funci√≥n y todos aquellos valores que escribamos dentro de la funci√≥n (es decir, dentro del par√©ntesis), son referidos como argumentos (arguments). Y la respuesta es s√≠, podemos escribir m√°s de un argumento en una funci√≥n. 4.5.1 Argumentos, sus Nombres y Valores por Defecto en las Funciones Arriba ya adelantamos que al interior de las funciones se pueden escribir argumentos y voy a recalcar el plural aqu√≠. Dentro del par√©ntesis de las funciones, se pueden distinguir el nombre de los argumentos y sus valores por defecto. Para explicar estos conceptos, introduciremos una nueva funci√≥n round(), la cual tiene por objetivo redondear un valor hacia el n√∫mero entero m√°s cercano. Veamos un ejemplo con el famoso n√∫mero pi: round(3.141592) ## [1] 3 En este ejemplo, podemos claramente darnos cuenta que el n√∫mero aproximado corresponde al 3 (y no al 4 que est√° mucho m√°s lejos en la recta num√©rica). Ahora supongamos que queremos redondear nuestro n√∫mero a 2 d√≠gitos. Para esto, podemos escribir: round(3.141592, 2) ## [1] 3.14 En esta expresi√≥n, tenemos 2 argumentos al interior de la funci√≥n round: el primer argumento que corresponde al valor a ser redondeado (es decir, 3.141592) y el segundo argumento es el n√∫mero de decimales a aproximar (es decir, 2) y, ambos, est√°n separados por una coma. Si notaron sagazmente, cuando escribimos round(3.141592) en el primer caso, no hubo un segundo argumento en la funci√≥n, por lo que R asumi√≥ el argumento por defecto. Al no estar escrito, asumi√≥ que est√°bamos buscando redondear al valor entero m√°s cercano sin decimales, as√≠ que all√≠ fue completado con el n√∫mero 0 el cual es el valor por defecto para esta funci√≥n en R. Sin embargo, en el segundo caso, nosotros escribimos expl√≠citamente un argumento (es decir, 2) en la segunda posici√≥n de la funci√≥n. De este modo, nosotros utilizamos la segunda posici√≥n de los argumentos de la funci√≥n para definir el n√∫mero de decimales a aproximar. Sin embargo, si queremos estar seguros de pasar el valor correcto al argumento de la funci√≥n round, podemos escribir el o los nombres de los argumentos (es decir, x y digits). Esto quedar√° mucho m√°s claro en el siguiente ejemplo: round(x = 3.141592, digits = 2) ## [1] 3.14 De esta manera, no cabe ning√∫n tipo de ambig√ºedades para los valores utilizados ya que han sido asignados bajo el nombre de los argumentos en conjunto con el s√≠mbolo =. Al mismo tiempo, al usar esta forma de pasar los argumentos al interior de la funci√≥n, da lo mismo la posici√≥n de los nombres de los argumentos: obtendremos el mismo resultado, como lo muestra el siguiente ejemplo: round(digits = 2, x = 3.141592) ## [1] 3.14 Pero vale la pena recalcar que si no utilizamos los nombres de los argumentos al interior de la funci√≥n, debemos respetar en qu√© posici√≥n son asignados los valores como lo vimos en los ejemplos de m√°s arriba (en el caso de la funci√≥n round, primero se debe poner el valor a redonderar, luego coma y el valor de los decimales a redondear). 4.6 Almacenando N√∫meros (o Vectores) en Variables Una de las funcionalidades m√°s importantes que nos entrega R es la posibilidad de almacenar valores num√©ricos a partir de la funci√≥n c que es una abreviaci√≥n para la funci√≥n combine o combinar. Esto ya fue brevemente mencionado en el cap√≠tulo 2 cuando est√°bamos seleccionando columnas en un data frame. A continuaci√≥n, mostramos un ejemplo donde almacenaremos un conjunto de valores num√©ricos en la variable ejemplo_vector y luego lo ejecutaremos: ejemplo_vector &lt;- c(20, 10, 8, 34, 64, 100,78, 3, 52, 91) ejemplo_vector ## [1] 20 10 8 34 64 100 78 3 52 91 El vector c(20, 10, 8, 34, 64, 100,78, 3, 52, 91) almacenado en la variable ejemplo_vector posee 10 elementos. Al mismo tiempo, es muy √∫til saber c√≥mo obtener informaci√≥n de los elementos de un vector. Si quisi√©ramos saber el quinto valor de la variable ejemplo_vector, el cual es 64, vamos a escribir [5] y aplicarla a la variable. Por ejemplo: ejemplo_vector[5] ## [1] 64 4.6.1 Modificando los Valores de un Vector Otra funci√≥n sumamente √∫til de R es poder alterar o modificar los valores dentro de un vector particular. Para realizar esto, simplemente debemos utilizar la misma idea expresada en la l√≠nea de c√≥digo de arriba y asignar un nuevo valor num√©rico al elemento a modificar. Por ejemplo, vamos a modificar el valor 64 por 0, y luego imprimiremos la variable con la modificaci√≥n del valor del vector abajo: ejemplo_vector[5] &lt;- 0 ejemplo_vector ## [1] 20 10 8 34 0 100 78 3 52 91 Para estructurar los contenidos de este cap√≠tulo, me he basado en el libro Learning Statistics with R escrito por Danielle Navarro.‚Ü©Ô∏é "],["instalando-librer√≠as-en-r.html", "Cap√≠tulo 5 Instalando Librer√≠as en R", " Cap√≠tulo 5 Instalando Librer√≠as en R Cap√≠tulo en construcci√≥n. "],["tidyverse-librer√≠a-de-an√°lisis-de-datos.html", "Cap√≠tulo 6 Tidyverse: Librer√≠a de An√°lisis de Datos", " Cap√≠tulo 6 Tidyverse: Librer√≠a de An√°lisis de Datos Cap√≠tulo en construcci√≥n. "],["glosario.html", "Cap√≠tulo 7 Glosario", " Cap√≠tulo 7 Glosario Atributos. Los objetos en R pueden tener atributos. Los atributos son como metadatos para el objeto. Estos metadatos pueden ser muy √∫tiles ya que nos proporcionan informaci√≥n del objeto. Por ejemplo, los nombres de columna en un data frame nos proporcionan informaci√≥n de lo que contiene cada columna. Algunos ejemplos de atributos en objetos R son: names, dimnames, dimensions (en matrices, arrays), class (e.g. integer, numeric), length, u otros atributos/metadatos definidos por el usuario. Para acceder a los atributos de un objeto (si los hay), se utiliza la funci√≥n attributes(). No todos los objetos contienen atributos. En este ultimo caso, la funci√≥n attributes() devolver√° NULL. Data Frame. Los data frames son utilizados en R para almacenar datos de tipo tabla. Es un tipo de objeto muy importante en R y utilizados ampliamente en modelado estad√≠stico. Los data frames son representados como un tipo especial de lista donde cada elemento de la lista tiene que tener la misma longitud. Podemos considerar cada elemento de la lista como una columna y la longitud de cada elemento de la lista como el n√∫mero de filas. A diferencia de las matrices, los data frames pueden almacenar diferentes clases de objetos en cada columna. Recordemos que los matrices deb√≠an tener cada elemento de la misma clase (e.g. todos enteros o todos numeÃÅricos). Entorno de Desarrollo Integrado. Los entornos de Desarrollo, o integrated development environment (IDE) en ingleÃÅs, son las herramientas con las cuales los programadores crean aplicaciones. En el caso de R, RStudio es un entorno de Desarrollo integrado. Un IDE consta de las siguientes herramientas: 1. Editor. Generalmente, se utilizan editores que colorean la sintaxis para ayudar al programador a comprender mejor el programa y detectar los errores maÃÅs faÃÅcilmente. 2. Compilador o inteÃÅrprete. Dependiendo del tipo de lenguaje utilizado (en nuestro caso R), se necesitaraÃÅ para ejecucioÃÅn el inteÃÅrprete o el compilador para generar coÃÅdigo ejecutable. 3. Depurador. Un buen depurador siempre tiene un inteÃÅrprete detraÃÅs para ir ejecutando oÃÅrdenes paso a paso, inspeccionar el valor de variables, etc. Factores. Los factores son utilizados para representar categor√≠as y pueden estar ordenadas o desordenadas. Podemos pensar en los factores como un vector de enteros en el que cada entero representa una etiqueta. Los factores son importantes en modelos estad√≠sticos y se utilizan especialmente para modelar junto a funciones como lm() y glm(). Funci√≥n. Las funciones re√∫nen una secuencia de operaciones como un todo, almacen√°ndola para su uso continuo. Las funciones proveen: (1) un nombre que podemos recordar y usar para invocarla; (2) una soluci√≥n para la necesidad de recordar operaciones individuales; (3) un conjunto definido de inputs y outputs esperados. Lenguaje de Programaci√≥n R. R es un entorno y lenguaje de programaci√≥n con un enfoque al an√°lisis estad√≠stico. Se trata de uno de los lenguajes de programaci√≥n m√°s utilizados en investigaci√≥n cient√≠fica, siendo adem√°s muy popular en los campos de aprendizaje autom√°tico (machine learning), miner√≠a de datos, investigaci√≥n biom√©dica, bioinform√°tica y matem√°ticas financieras. A esto contribuye la posibilidad de cargar diferentes bibliotecas o paquetes con funcionalidades de c√°lculo y graficaci√≥n. Listas. Las listas son un tipo especial de vector que pueden contener objetos de diferentes clases. Las listas son una estructura de datos muy importante y ampliamente utilizada. Matrices. Las matrices son vectores con un atributo denominado dimension. Este atributo que nos proporciona la dimensi√≥n de la matriz es en s√≠ mismo un vector de tipo entero de longitud 2 (n√∫mero de filas, n√∫mero de columnas). Metadatos. Los metadatos, literalmente sobre datos, son datos que describen otros datos. En general, un grupo de metadatos se refiere a un grupo de datos que describen el contenido informativo de un objeto al que se denomina recurso. El concepto de metadatos es an√°logo al uso de √≠ndices para localizar objetos en vez de datos. Por ejemplo, en una biblioteca se usan fichas que especifican autores, t√≠tulos, casas editoriales y lugares para buscar libros. As√≠, los metadatos ayudan a ubicar datos. Objetos en R. R tiene cinco tipos b√°sicos de objetos: character, numeric (n√∫mero real), integer complex, logical (True/False). El objeto m√°s b√°sico en R es un vector. Podemos crear vectores vac√≠os con la funci√≥n vector(). Existe s√≥lo una regla sobre los vectores en R:un vector s√≥lo puede contener objetos de la misma clase. Pero, como en cualquier buena regla, las listas son una excepci√≥n. Una lista es representada como un vector pero puede contener objetos de diferentes clases. Programaci√≥n Orientada a Objetos.La programaci√≥n Orientada a Objetos (POO) se define como un paradigma de la programaci√≥n, una manera de programar espec√≠fica, donde se organiza el c√≥digo en unidades denominadas clases, de las cuales se crean objetos que se relacionan entre s√≠ para conseguir los objetivos de las aplicaciones.La POO es una forma especial de programar, m√°s cercana a como expresar√≠amos las cosas en la vida real que otros tipos de programaci√≥n. R Markdown. R Markdown fue dise√±ado para facilitar la replicabilidad del c√≥digo y la descripci√≥n narrativa del proceso de an√°lisis de datos en el mismo documento. De este modo, los resultados son autom√°ticamente generados desde la misma fuente de c√≥digo. R Markdown soporta una docena de formatos de salidas est√°ticas y din√°micas. R Notebook. R Notebook es un documento de R Markdown con pedazos o trozos de c√≥digo que pueden ser ejecutados independiente e interactivamente, con la salida visible inmediatamente despu√©s del c√≥digo o input. RStudio. Es un entorno de desarrollo integrado (IDE) para el lenguaje de programaci√≥n R, dedicado a la computaci√≥n estad√≠stica y gr√°ficos. Incluye una consola, editor de sintaxis que apoya la ejecuci√≥n de c√≥digo, as√≠ como herramientas para el trazado, la depuraci√≥n y la gesti√≥n del espacio de trabajo. RStudio est√° disponible para Windows, Mac y Linux o para navegadores conectados a RStudio Server o RStudio Server Pro (Debian / Ubuntu, RedHat / CentOS, y SUSE Linux). RStudio tiene la misi√≥n de proporcionar el entorno inform√°tico estad√≠stico R. Permite un an√°lisis y desarrollo para que cualquiera pueda analizar los datos con R. Valores Indefinidos. Los valores indefinidos son indicados en R por NA o NaN para cualquier operaci√≥n indefinida matematicamente. Vectores. Los vectores en R son objetos de una √∫nica dimensi√≥n que puede contener datos num√©ricos, cadena de caracteres o datos l√≥gicos, entre otros. Esencialmente son uno de los elementos b√°sicos en la estructura de los datos en R. Pueden contener solo elementos de un solo tipo, aunque su tama√±o podr√≠a ser ilimitado. "],["anexo-1-m√°s-comandos-b√°sicos.html", "Anexo 1: M√°s Comandos B√°sicos", " Anexo 1: M√°s Comandos B√°sicos Anexo en construcci√≥n. "],["anexo-2.html", "Anexo 2: Respuesta a Ejercicios Respuestas de Ejercicios de la Subsecci√≥n 2.7.1 Respuestas de Ejercicios de la Subsecci√≥n 3.7.1", " Anexo 2: Respuesta a Ejercicios Respuestas de Ejercicios de la Subsecci√≥n 2.7.1 Ejercicio 1 head(dataset, 20) Ejercicio 2 tail(dataset, 15) Ejercicio 3 dataset$Nivel Ejercicio 4 dataset[50:95, c(&quot;edad&quot;, &quot;calificacion_5&quot;)] Ejercicio 5 ejercicio_4 &lt;- dataset[50:95, c(&quot;edad&quot;, &quot;calificacion_5&quot;)] Ejercicio 6 dim(ejercicio_4) Ejercicio 7 subset(dataset, Nivel == 301 ) Ejercicio 8 subset(dataset, Nivel == 101 | Nivel == 201 | Nivel == 202) Ejercicio 9 summary(dataset$promedio, na.rm = TRUE) Ejercicio 10 promedio_preg_10 &lt;- rowMeans(dataset[,5:7], na.rm=TRUE) Ejercicio 11 table(dataset$Nivel) Ejercicio 12 barplot(table(dataset$Nivel)) Ejercicio 13 plot(dataset$emociones_positivas, dataset$emociones_negativas) Ejercicio 14 modelo_lineal &lt;- lm(dataset$emociones_negativas ~ dataset$emociones_positivas, data = dataset) plot(dataset$emociones_negativas, dataset$emociones_positivas) abline(modelo_lineal, col = &quot;blue&quot;) Ejercicio 15 modelo_lineal Respuestas de Ejercicios de la Subsecci√≥n 3.7.1 Ejercicio 1 File ‚ÜíNew file ‚Üí R Notebook ‚Üí save current document ‚Üí ejercicio_1 Ejercicio 2 Lo que deber√≠a pasar es que los colores del c√≥digo han cambiado de color a lo largo del R Notebook. Esto significa que R no esta interpretando correctamente donde termina dicho trozo de c√≥digo. Debido a esto, no es una buena idea agregar o eliminar guiones en esta parte del script porque va a estropear todo el formato del c√≥digo escrito abajo. A todo esto, no olviden agregar nuevamente el gui√≥n al inicio del script (deben ser tres guiones). Ejercicio 3. Simplemente remuevan el texto que aparece en la l√≠nea 14 a 18. No deber√≠a ocurrir ning√∫n error para correr el c√≥digo en este R Notebook. Ejercicio 4. Al ejecutar el trozo de c√≥digo deber√≠an ver un gr√°fico. Recuerden que esto se hace presionando el bot√≥n con la flecha verde Run Current Chunk. Alternativamente, podemos usar el siguiente atajo con el teclado en Windows Ctrl + Shift * Enter o el siguiente Cmd + Shift + Enter si estamos usando macOS. Ejercicio 5. Si estas usando macOS, debes usar Cmd + Option + I; y si estas usando Windows, utiliza Ctrl + Alt + I. Asimismo, tambi√©n puedes usar la opci√≥n Insert a new code chunk para agregar pedazos de c√≥digo en el R Markdown. Ejercicio 6. [1] 64.4 "],["sobre-el-autor-del-curso.html", "Sobre el Autor del Curso", " Sobre el Autor del Curso Daniel P√©rez Zapata naci√≥ en Arica, Chile. Estudi√≥ Psicolog√≠a en la Universidad de Tarapac√° (2009) y tambi√©n se gradu√≥ de Magister en Ciencias Sociales Aplicadas (2012) en la misma universidad. Luego, realiz√≥ un M√°ster en Psicolog√≠a Cognitiva (2016) en la Universidad de Queensland (Australia), bajo la gu√≠a de las profesoras Virginia Slaughter y Julie Henry. Actualmente se encuentra completando un PhD en Psicolog√≠a Cognitiva en la Universidad de Birmingham (Reino Unido), supervisado por el profesor y Dr. Ian Apperly y por el Dr. Ian Charest. Para saber m√°s sobre su trabajo acad√©mico visita este link. "]]
